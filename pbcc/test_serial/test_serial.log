Open PicoBlaze Assembler log for program "test_serial.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-27T01:39:35
  Target architecture: PicoBlaze-3

  Last occupied address: 026 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 39
  Memory locations available: 985
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 15
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Fri Sep 27 01:39:25 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------

000  00F3F                                   load sf, 3f
001  34002            ╭⤙                     jump __sdcc_program_startup
002                   │                      ;--------------------------------------------------------
002                   │                      ; Home
002                   │                      ;--------------------------------------------------------
002                   │ __sdcc_program_startup:
002  30009           ╭┴⤙                     call _main
003                  │                       ;	return from main will lock up
003                  │          __sdcc_loop:
003  34003           │╰▶                     jump __sdcc_loop
004                  │                       ;--------------------------------------------------------
004                  │                       ; code
004                  │                       ;--------------------------------------------------------
004                  │                       ;	../common/serial.h:21: void UART_setupRx()
004                  │        _UART_setupRx:
004                  │                       ;	../common/serial.h:23: PBLAZEPORT[UART_OUT_CONFIG_L] = UART_CLK_BIT_L;
004  00005           │╭▶                     load s0, 05
005  2C007           ││                      output s0, 07
006                  ││                      ;	../common/serial.h:24: PBLAZEPORT[UART_OUT_CONFIG_H] = UART_CLK_BIT_H;
006  0000D           ││                      load s0, 0d
007  2C008           ││                      output s0, 08
008  2A000           ││                      return
009                  ││                      ;	../common/serial.h:27: unsigned char getchar()
009                  ││            _getchar:
009                  ││                      ;	../common/serial.h:31: aux = 0;
009                  ││                      ;REMOVED: load s0, 00
009                  ││                      ;	../common/serial.h:32: while (!aux) {
009                  ││             _L00103:
009                  ││                      ;REMOVED: compare s0, 00
009                  ││                      ;REMOVED: jump Z, _LC00125
009                  ││                      ;REMOVED: jump _L00105
009                  ││            _LC00125:
009                  ││                      ;	../common/serial.h:33: aux = PBLAZEPORT[INT_IN_FLAGS];
009                  ││                      ;REMOVED: input s1, 00
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;	../common/serial.h:34: aux = aux & UART_RX_INT_FLAG_BIT;
009                  ││                      ;REMOVED: load s1, s0
009                  ││                      ;REMOVED: and s1, 08
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;REMOVED: jump _L00103
009                  ││             _L00105:
009                  ││                      ;	../common/serial.h:37: aux = PBLAZEPORT[UART_RX];
009                  ││                      ;REMOVED: input s1, 06
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;	../common/serial.h:38: return aux;
009                  ││                      ;REMOVED: load sb, s0
009                  ││                      ;REMOVED: return
009                  ││                      ;	test_serial.c:5: void main()
009                  ││               _main:
009                  ││                      ;	test_serial.c:11: UART_setupRx();
009  30004           ╰┴▶                     call _UART_setupRx
00A                                          ;	test_serial.c:15: rx = 0;
00A  00000                                   load s0, 00
00B                                          ;	test_serial.c:16: tx = 0;
00B  00100                                   load s1, 00
00C                                          ;	test_serial.c:18: PBLAZEPORT[PORTC_OUT] = 0x55;
00C  00255                                   load s2, 55
00D  2C205                                   output s2, 05
00E                                          ;	test_serial.c:22: while (!rx) {
00E                                 _L00110:
00E  14000         ╭─┬─▶                     compare s0, 00
00F  35011         │ │╭⤙                     jump Z, _LC00126
010  34017         │╭──⤙                     jump _L00112
011                ││││            _LC00126:
011                ││││                      ;	test_serial.c:23: flags = PBLAZEPORT[INT_IN_FLAGS];
011  04200         │││╰▶                     input s2, 00
012  01320         │││                       load s3, s2
013                │││                       ;	test_serial.c:24: rx = flags & UART_RX_INT_FLAG_BIT;
013  01230         │││                       load s2, s3
014  0A208         │││                       and s2, 08
015  01020         │││                       load s0, s2
016  3400E         ││╰─⤙                     jump _L00110
017                ││               _L00112:
017                ││                        ;	test_serial.c:26: rx = 0;
017  00000         │╰──▶                     load s0, 00
018                │                         ;	test_serial.c:28: data = PBLAZEPORT[UART_RX];
018  04206         │                         input s2, 06
019  01420         │                         load s4, s2
01A                │                         ;	test_serial.c:29: PBLAZEPORT[PORTC_OUT] = data;
01A  2C405         │                         output s4, 05
01B                │                         ;	test_serial.c:33: while(!tx) {
01B                │                _L00113:
01B  14100         │ ╭─▶                     compare s1, 00
01C  3501E         │ │╭⤙                     jump Z, _LC00127
01D  34024         │╭──⤙                     jump _L00115
01E                ││││            _LC00127:
01E                ││││                      ;	test_serial.c:34: flags = PBLAZEPORT[INT_IN_FLAGS];
01E  04200         │││╰▶                     input s2, 00
01F  01320         │││                       load s3, s2
020                │││                       ;	test_serial.c:35: tx = flags & UART_TX_INT_FLAG_BIT;
020  01230         │││                       load s2, s3
021  0A210         │││                       and s2, 10
022  01120         │││                       load s1, s2
023  3401B         ││╰─⤙                     jump _L00113
024                ││               _L00115:
024                ││                        ;	test_serial.c:37: tx = 0;
024  00100         │╰──▶                     load s1, 00
025                │                         ;	test_serial.c:39: PBLAZEPORT[UART_TX] = data;
025  2C409         │                         output s4, 09
026  3400E         ╰───⤙                     jump _L00110
027                                          ;REMOVED: return
027                                          ;--------------------------------------------------------
027                                          ; interrupt vector
027                                          ;--------------------------------------------------------

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_serial/test_serial.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    datestamp_day      1B
    datestamp_month    09
    datestamp_year     13
    timestamp_hours    01
    timestamp_minutes  27
    timestamp_seconds  23


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "27 Sep 2019"
    timestamp$       "01:39:35"


List of line labels
-------------------
    Label                   Addr  Source PSM file
 --------                   ----  ---------------
    _L00103                 009   test_serial.psm
    _L00105                 009   test_serial.psm
    _L00110                 00E   test_serial.psm
    _L00112                 017   test_serial.psm
    _L00113                 01B   test_serial.psm
    _L00115                 024   test_serial.psm
    _LC00125                009   test_serial.psm
    _LC00126                011   test_serial.psm
    _LC00127                01E   test_serial.psm
    _UART_setupRx           004   test_serial.psm
    __sdcc_loop             003   test_serial.psm
    __sdcc_program_startup  002   test_serial.psm
 *  _getchar                009   test_serial.psm
    _main                   009   test_serial.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          -
   ADDCY        -
   AND          2
   CALL         2
   COMPARE      2
   DISABLE      -
   ENABLE       -
   FETCH        -
   INPUT        3
   JUMP         9
   LOAD         15
   OR           -
   OUTPUT       5
   RETURN       1
   RETURNI      -
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        -
   SUB          -
   SUBCY        -
   TEST         -
   XOR          -
