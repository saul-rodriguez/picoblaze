Open PicoBlaze Assembler log for program "test_serial.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-26T21:20:00
  Target architecture: PicoBlaze-3

  Last occupied address: 018 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 25
  Memory locations available: 999
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 15
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Thu Sep 26 21:19:52 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------

000  00F3F                                   load sf, 3f
001  34002            ╭⤙                     jump __sdcc_program_startup
002                   │                      ;--------------------------------------------------------
002                   │                      ; Home
002                   │                      ;--------------------------------------------------------
002                   │ __sdcc_program_startup:
002  30009           ╭┴⤙                     call _main
003                  │                       ;	return from main will lock up
003                  │          __sdcc_loop:
003  34003           │╰▶                     jump __sdcc_loop
004                  │                       ;--------------------------------------------------------
004                  │                       ; code
004                  │                       ;--------------------------------------------------------
004                  │                       ;	../common/serial.h:21: void UART_setupRx()
004                  │        _UART_setupRx:
004                  │                       ;	../common/serial.h:23: PBLAZEPORT[UART_OUT_CONFIG_L] = UART_CLK_BIT_L;
004  00005           │╭▶                     load s0, 05
005  2C007           ││                      output s0, 07
006                  ││                      ;	../common/serial.h:24: PBLAZEPORT[UART_OUT_CONFIG_H] = UART_CLK_BIT_H;
006  0000D           ││                      load s0, 0d
007  2C008           ││                      output s0, 08
008  2A000           ││                      return
009                  ││                      ;	../common/serial.h:27: unsigned char getchar()
009                  ││            _getchar:
009                  ││                      ;	../common/serial.h:31: aux = 0;
009                  ││                      ;REMOVED: load s0, 00
009                  ││                      ;	../common/serial.h:32: while (!aux) {
009                  ││             _L00103:
009                  ││                      ;REMOVED: compare s0, 00
009                  ││                      ;REMOVED: jump Z, _LC00120
009                  ││                      ;REMOVED: jump _L00105
009                  ││            _LC00120:
009                  ││                      ;	../common/serial.h:33: aux = PBLAZEPORT[INT_IN_FLAGS];
009                  ││                      ;REMOVED: input s1, 00
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;	../common/serial.h:34: aux = aux & UART_RX_INT_FLAG_BIT;
009                  ││                      ;REMOVED: load s1, s0
009                  ││                      ;REMOVED: and s1, 08
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;REMOVED: jump _L00103
009                  ││             _L00105:
009                  ││                      ;	../common/serial.h:37: aux = PBLAZEPORT[UART_RX];
009                  ││                      ;REMOVED: input s1, 06
009                  ││                      ;REMOVED: load s0, s1
009                  ││                      ;	../common/serial.h:38: return aux;
009                  ││                      ;REMOVED: load sb, s0
009                  ││                      ;REMOVED: return
009                  ││                      ;	test_serial.c:5: void main()
009                  ││               _main:
009                  ││                      ;	test_serial.c:11: UART_setupRx();
009  30004           ╰┴▶                     call _UART_setupRx
00A                                          ;	test_serial.c:15: rx = 0;
00A  00000                                   load s0, 00
00B                                          ;	test_serial.c:18: while (!rx) {
00B                                 _L00110:
00B  14000         ╭─┬─▶                     compare s0, 00
00C  3500E         │ │╭⤙                     jump Z, _LC00121
00D  34014         │╭──⤙                     jump _L00112
00E                ││││            _LC00121:
00E                ││││                      ;	test_serial.c:19: flags = PBLAZEPORT[INT_IN_FLAGS];
00E  04100         │││╰▶                     input s1, 00
00F  01210         │││                       load s2, s1
010                │││                       ;	test_serial.c:20: rx = flags & UART_RX_INT_FLAG_BIT;
010  01120         │││                       load s1, s2
011  0A108         │││                       and s1, 08
012  01010         │││                       load s0, s1
013  3400B         ││╰─⤙                     jump _L00110
014                ││               _L00112:
014                ││                        ;	test_serial.c:22: rx = 0;
014  00000         │╰──▶                     load s0, 00
015                │                         ;	test_serial.c:24: data = PBLAZEPORT[UART_RX];
015  04106         │                         input s1, 06
016  01210         │                         load s2, s1
017                │                         ;	test_serial.c:25: PBLAZEPORT[PORTC_OUT] = data;
017  2C205         │                         output s2, 05
018  3400B         ╰───⤙                     jump _L00110
019                                          ;REMOVED: return
019                                          ;--------------------------------------------------------
019                                          ; interrupt vector
019                                          ;--------------------------------------------------------

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_serial/test_serial.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    datestamp_day      1A
    datestamp_month    09
    datestamp_year     13
    timestamp_hours    15
    timestamp_minutes  14
    timestamp_seconds  00


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "26 Sep 2019"
    timestamp$       "21:20:00"


List of line labels
-------------------
    Label                   Addr  Source PSM file
 --------                   ----  ---------------
    _L00103                 009   test_serial.psm
    _L00105                 009   test_serial.psm
    _L00110                 00B   test_serial.psm
    _L00112                 014   test_serial.psm
    _LC00120                009   test_serial.psm
    _LC00121                00E   test_serial.psm
    _UART_setupRx           004   test_serial.psm
    __sdcc_loop             003   test_serial.psm
    __sdcc_program_startup  002   test_serial.psm
 *  _getchar                009   test_serial.psm
    _main                   009   test_serial.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          -
   ADDCY        -
   AND          1
   CALL         2
   COMPARE      1
   DISABLE      -
   ENABLE       -
   FETCH        -
   INPUT        2
   JUMP         6
   LOAD         9
   OR           -
   OUTPUT       3
   RETURN       1
   RETURNI      -
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        -
   SUB          -
   SUBCY        -
   TEST         -
   XOR          -
