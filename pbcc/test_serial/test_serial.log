Open PicoBlaze Assembler log for program "test_serial.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-30T00:08:52
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 197
  Memory locations available: 827
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 66
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Mon Sep 30 00:08:41 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _intcon, 00
000                                          constant _eusart1TxHead, 01
000                                          constant _eusart1TxTail, 02
000                                          constant _eusart1TxBufferRemaining, 03
000                                          constant _eusart1RxHead, 04
000                                          constant _eusart1RxTail, 05
000                                          constant _eusart1RxCount, 06
000                                          constant _eusart1TxBuffer_7, 07
000                                          constant _eusart1TxBuffer_6, 08
000                                          constant _eusart1TxBuffer_5, 09
000                                          constant _eusart1TxBuffer_4, 0a
000                                          constant _eusart1TxBuffer_3, 0b
000                                          constant _eusart1TxBuffer_2, 0c
000                                          constant _eusart1TxBuffer_1, 0d
000                                          constant _eusart1TxBuffer_0, 0e
000                                          constant _eusart1RxBuffer_7, 0f
000                                          constant _eusart1RxBuffer_6, 10
000                                          constant _eusart1RxBuffer_5, 11
000                                          constant _eusart1RxBuffer_4, 12
000                                          constant _eusart1RxBuffer_3, 13
000                                          constant _eusart1RxBuffer_2, 14
000                                          constant _eusart1RxBuffer_1, 15
000                                          constant _eusart1RxBuffer_0, 16

000                                          ;	../common/bamse.h:37: volatile unsigned char intcon = 0;
000  00000                                   load s0, 00
001  2E000                                   store s0, _intcon
002                                          ;	../common/serial.h:27: volatile unsigned char eusart1TxHead = 0;
002  00000                                   load s0, 00
003  2E001                                   store s0, _eusart1TxHead
004                                          ;	../common/serial.h:28: volatile unsigned char eusart1TxTail = 0;
004  00000                                   load s0, 00
005  2E002                                   store s0, _eusart1TxTail
006                                          ;	../common/serial.h:30: volatile unsigned char eusart1TxBufferRemaining = 0;
006  00000                                   load s0, 00
007  2E003                                   store s0, _eusart1TxBufferRemaining
008                                          ;	../common/serial.h:31: volatile unsigned char eusart1RxHead = 0;
008  00000                                   load s0, 00
009  2E004                                   store s0, _eusart1RxHead
00A                                          ;	../common/serial.h:32: volatile unsigned char eusart1RxTail = 0;
00A  00000                                   load s0, 00
00B  2E005                                   store s0, _eusart1RxTail
00C  00F3F                                   load sf, 3f
00D  3400E            ╭⤙                     jump __sdcc_program_startup
00E                   │                      ;--------------------------------------------------------
00E                   │                      ; Home
00E                   │                      ;--------------------------------------------------------
00E                   │ __sdcc_program_startup:
00E  3008E      ╭─────┴⤙                     call _main
00F             │                            ;	return from main will lock up
00F             │               __sdcc_loop:
00F  3400F      │     ╰▶                     jump __sdcc_loop
010             │                            ;--------------------------------------------------------
010             │                            ; code
010             │                            ;--------------------------------------------------------
010             │                            ;	../common/bamse.h:39: void update_intcon(void)
010             │            _update_intcon:
010             │                            ;	../common/bamse.h:41: PBLAZEPORT[INT_OUT_CONFIG] = intcon;
010  06000      ╭┬─┬─┬─▶                     fetch s0, _intcon
011  2C000      ││ │ │                       output s0, 00
012  2A000      ││ │ │                       return
013             ││ │ │                       ;	../common/bamse.h:44: void intcon_enable_bit(unsigned char pos)
013             ││ │ │   _intcon_enable_bit:
013  010B0      ╭─────┬▶                     load s0, sb
014             ││ │ ││                      ;	../common/bamse.h:46: intcon |= pos;
014  06100      ││ │ ││                      fetch s1, _intcon
015  01210      ││ │ ││                      load s2, s1
016  0D200      ││ │ ││                      or s2, s0
017  2E200      ││ │ ││                      store s2, _intcon
018  2A000      ││ │ ││                      return
019             ││ │ ││                      ;	../common/bamse.h:50: void intcon_disable_bit(unsigned char pos)
019             ││ │ ││ _intcon_disable_bit:
019  010B0      ││╭─┬──▶                     load s0, sb
01A             │││││││                      ;	../common/bamse.h:52: intcon &= (~pos);
01A  0E0FF      │││││││                      xor s0, ff
01B  06100      │││││││                      fetch s1, _intcon
01C  01210      │││││││                      load s2, s1
01D  0B200      │││││││                      and s2, s0
01E  2E200      │││││││                      store s2, _intcon
01F  2A000      │││││││                      return
020             │││││││                      ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
020             │││││││ _pbcc_enable_interrupt:
020             │││││││                      ;	device/include/pblaze/intr.h:34: __endasm;
020  3C001      ╭──────▶                     enable INTERRUPT
021  2A000      │││││││                      return
022             │││││││                      ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
022             │││││││ _pbcc_disable_interrupt:
022             │││││││                      ;	device/include/pblaze/intr.h:41: __endasm;
                │││││││                      ;
022             │││││││                      ;REMOVED: disable INTERRUPT
022             │││││││                      ;REMOVED: return
022             │││││││                      ;	../common/serial.h:55: void UART_setup()
022             │││││││         _UART_setup:
022             │││││││                      ;	../common/serial.h:57: PBLAZEPORT[UART_OUT_CONFIG_L] = UART_CLK_BIT_L;
022  00005      ╭──────▶                     load s0, 05
023  2C007      │││││││                      output s0, 07
024             │││││││                      ;	../common/serial.h:58: PBLAZEPORT[UART_OUT_CONFIG_H] = UART_CLK_BIT_H;
024  0000D      │││││││                      load s0, 0d
025  2C008      │││││││                      output s0, 08
026             │││││││                      ;	../common/serial.h:61: eusart1TxHead = 0;
026  00000      │││││││                      load s0, 00
027  2E001      │││││││                      store s0, _eusart1TxHead
028             │││││││                      ;	../common/serial.h:62: eusart1TxTail = 0;
028  00000      │││││││                      load s0, 00
029  2E002      │││││││                      store s0, _eusart1TxTail
02A             │││││││                      ;	../common/serial.h:63: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
02A  00008      │││││││                      load s0, 08
02B  2E003      │││││││                      store s0, _eusart1TxBufferRemaining
02C             │││││││                      ;	../common/serial.h:65: eusart1RxHead = 0;
02C  00000      │││││││                      load s0, 00
02D  2E004      │││││││                      store s0, _eusart1RxHead
02E             │││││││                      ;	../common/serial.h:66: eusart1RxTail = 0;
02E  00000      │││││││                      load s0, 00
02F  2E005      │││││││                      store s0, _eusart1RxTail
030             │││││││                      ;	../common/serial.h:67: eusart1RxCount = 0;
030  00000      │││││││                      load s0, 00
031  2E006      │││││││                      store s0, _eusart1RxCount
032             │││││││                      ;	../common/serial.h:70: intcon_enable_bit(UART_RX_INT_FLAG_BIT);
032  00B08      │││││││                      load sb, 08
033  30013      ││││││╰⤙                     call _intcon_enable_bit
034             ││││││                       ;	../common/serial.h:71: update_intcon();
034  30010      │││││╰─⤙                     call _update_intcon
035  2A000      │││││                        return
036             │││││                        ;	../common/serial.h:76: unsigned char getchar()
036             │││││              _getchar:
036             │││││                        ;	../common/serial.h:80: do {
036             │││││               _L00113:
036             │││││                        ;	../common/serial.h:81: flags = PBLAZEPORT[INT_IN_FLAGS];
036             │││││                        ;REMOVED: input s0, 00
036             │││││                        ;	../common/serial.h:82: rx = flags & UART_RX_INT_FLAG_BIT;
036             │││││                        ;REMOVED: and s0, 08
036             │││││                        ;	../common/serial.h:83: } while (!rx);
036             │││││                        ;REMOVED: compare s0, 00
036             │││││                        ;REMOVED: jump NZ, _LC00185
036             │││││                        ;REMOVED: jump _L00113
036             │││││              _LC00185:
036             │││││                        ;	../common/serial.h:85: return PBLAZEPORT[UART_RX];
036             │││││                        ;REMOVED: input s0, 06
036             │││││                        ;REMOVED: load sb, s0
036             │││││                        ;REMOVED: return
036             │││││                        ;	../common/serial.h:89: void putchar(unsigned char data)
036             │││││              _putchar:
036             │││││                        ;REMOVED: load s0, sb
036             │││││                        ;	../common/serial.h:93: do {
036             │││││               _L00120:
036             │││││                        ;	../common/serial.h:94: flags = PBLAZEPORT[INT_IN_FLAGS];
036             │││││                        ;REMOVED: input s1, 00
036             │││││                        ;	../common/serial.h:95: tx = flags & UART_TX_INT_FLAG_BIT;
036             │││││                        ;REMOVED: and s1, 10
036             │││││                        ;	../common/serial.h:96: } while (!tx);
036             │││││                        ;REMOVED: compare s1, 00
036             │││││                        ;REMOVED: jump NZ, _LC00186
036             │││││                        ;REMOVED: jump _L00120
036             │││││              _LC00186:
036             │││││                        ;	../common/serial.h:98: PBLAZEPORT[UART_TX] = data;
036             │││││                        ;REMOVED: output s0, 09
036             │││││                        ;REMOVED: return
036             │││││                        ;	../common/serial.h:104: void EUSART1_Write(unsigned char txData)
036             │││││        _EUSART1_Write:
036             │││││                        ;REMOVED: load s0, sb
036             │││││                        ;	../common/serial.h:107: aux = eusart1TxBufferRemaining;
036             │││││                        ;REMOVED: fetch s1, _eusart1TxBufferRemaining
036             │││││                        ;	../common/serial.h:109: while(0 == aux)
036             │││││                        ;REMOVED: load s2, 00
036             │││││                        ;REMOVED: compare s1, 00
036             │││││                        ;REMOVED: jump NZ, _LC00187
036             │││││                        ;REMOVED: load s2, 01
036             │││││              _LC00187:
036             │││││               _L00127:
036             │││││                        ;REMOVED: compare s2, 00
036             │││││                        ;REMOVED: jump Z, _LC00188
036             │││││                        ;REMOVED: jump _L00127
036             │││││              _LC00188:
036             │││││                        ;	../common/serial.h:113: intcon_disable_bit(UART_TX_INT_FLAG_BIT);
036             │││││                        ;REMOVED: store s0, (sf)
036             │││││                        ;REMOVED: sub sf, 01
036             │││││                        ;REMOVED: store s1, (sf)
036             │││││                        ;REMOVED: sub sf, 01
036             │││││                        ;REMOVED: load sb, 10
036             │││││                        ;REMOVED: call _intcon_disable_bit
036             │││││                        ;REMOVED: add sf, 01
036             │││││                        ;REMOVED: fetch s1, (sf)
036             │││││                        ;REMOVED: add sf, 01
036             │││││                        ;REMOVED: fetch s0, (sf)
036             │││││                        ;	../common/serial.h:114: update_intcon();
036             │││││                        ;REMOVED: store s0, (sf)
036             │││││                        ;REMOVED: sub sf, 01
036             │││││                        ;REMOVED: store s1, (sf)
036             │││││                        ;REMOVED: sub sf, 01
036             │││││                        ;REMOVED: call _update_intcon
036             │││││                        ;REMOVED: add sf, 01
036             │││││                        ;REMOVED: fetch s1, (sf)
036             │││││                        ;REMOVED: add sf, 01
036             │││││                        ;REMOVED: fetch s0, (sf)
036             │││││                        ;	../common/serial.h:116: eusart1TxBuffer[eusart1TxHead++] = txData;
036             │││││                        ;REMOVED: load s2, _eusart1TxBuffer_7
036             │││││                        ;REMOVED: fetch s3, _eusart1TxHead
036             │││││                        ;REMOVED: fetch s4, _eusart1TxHead
036             │││││                        ;REMOVED: add s4, 01
036             │││││                        ;REMOVED: add s2, s3
036             │││││                        ;REMOVED: store s0, (s2)
036             │││││                        ;	../common/serial.h:117: if(sizeof(eusart1TxBuffer) <= eusart1TxHead) {
036             │││││                        ;REMOVED: compare s4, 08
036             │││││                        ;REMOVED: jump C, _L00131
036             │││││                        ;	../common/serial.h:118: eusart1TxHead = 0;
036             │││││                        ;REMOVED: load s0, 00
036             │││││                        ;REMOVED: store s0, _eusart1TxHead
036             │││││               _L00131:
036             │││││                        ;	../common/serial.h:121: aux--;
036             │││││                        ;REMOVED: sub s1, 01
036             │││││                        ;	../common/serial.h:122: eusart1TxBufferRemaining = aux;
036             │││││                        ;REMOVED: store s1, _eusart1TxBufferRemaining
036             │││││                        ;	../common/serial.h:124: intcon_enable_bit(UART_TX_INT_FLAG_BIT);
036             │││││                        ;REMOVED: store s4, _eusart1TxHead
036             │││││                        ;REMOVED: load sb, 10
036             │││││                        ;REMOVED: call _intcon_enable_bit
036             │││││                        ;	../common/serial.h:125: update_intcon();
036             │││││                        ;REMOVED: call _update_intcon
036             │││││                        ;REMOVED: return
036             │││││                        ;	../common/serial.h:129: unsigned char EUSART1_is_tx_ready(void)
036             │││││   _EUSART1_is_tx_ready:
036             │││││                        ;	../common/serial.h:131: return eusart1TxBufferRemaining;
036             │││││                        ;REMOVED: fetch s0, _eusart1TxBufferRemaining
036             │││││                        ;REMOVED: load sb, s0
036             │││││                        ;REMOVED: return
036             │││││                        ;	../common/serial.h:134: void EUSART1_Transmit_ISR(void)
036             │││││   _EUSART1_Transmit_ISR:
036             │││││                        ;	../common/serial.h:139: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
036  06003      ╭──────▶                     fetch s0, _eusart1TxBufferRemaining
037  14008      │││││                        compare s0, 08
038  3583A      │││││ ╭⤙                     jump C, _LC00189
039  34048      │││││╭─⤙                     jump _L00142
03A             │││││││            _LC00189:
03A             │││││││                      ;	../common/serial.h:143: aux1 = eusart1TxTail;
03A  06102      ││││││╰▶                     fetch s1, _eusart1TxTail
03B             ││││││                       ;	../common/serial.h:144: PBLAZEPORT[UART_TX] = eusart1TxBuffer[aux1];
03B  00207      ││││││                       load s2, _eusart1TxBuffer_7
03C  19210      ││││││                       add s2, s1
03D  07320      ││││││                       fetch s3, (s2)
03E  2C309      ││││││                       output s3, 09
03F             ││││││                       ;	../common/serial.h:145: aux1++;
03F  18101      ││││││                       add s1, 01
040             ││││││                       ;	../common/serial.h:146: eusart1TxTail = aux1;
040  2E102      ││││││                       store s1, _eusart1TxTail
041             ││││││                       ;	../common/serial.h:149: if(sizeof(eusart1TxBuffer) <= aux1)
041  14108      ││││││                       compare s1, 08
042  35845      ││││││╭⤙                     jump C, _L00140
043             │││││││                      ;	../common/serial.h:152: eusart1TxTail = aux1;
043  00200      │││││││                      load s2, 00
044  2E202      │││││││                      store s2, _eusart1TxTail
045             │││││││             _L00140:
045             │││││││                      ;	../common/serial.h:155: aux1 = eusart1TxBufferRemaining;
045             │││││││                      ;	../common/serial.h:156: aux1++;
045  18001      ││││││╰▶                     add s0, 01
046             ││││││                       ;	../common/serial.h:158: eusart1TxBufferRemaining = aux1;
046  2E003      ││││││                       store s0, _eusart1TxBufferRemaining
047  3404B      ││││││╭⤙                     jump _L00144
048             │││││││             _L00142:
048             │││││││                      ;	../common/serial.h:163: intcon_disable_bit(UART_TX_INT_FLAG_BIT);
048  00B10      │││││╰─▶                     load sb, 10
049  30019      ││││╰──⤙                     call _intcon_disable_bit
04A             ││││  │                      ;	../common/serial.h:164: update_intcon();
04A  30010      │││╰───⤙                     call _update_intcon
04B             │││   │             _L00144:
04B  2A000      │││   ╰▶                     return
04C             │││                          ;	../common/serial.h:170: unsigned char EUSART1_Read(void)
04C             │││           _EUSART1_Read:
04C             │││                          ;	../common/serial.h:174: aux1 = eusart1RxCount;
04C  06006      │││╭───▶                     fetch s0, _eusart1RxCount
04D             ││││                         ;	../common/serial.h:175: while(0 == aux1)
04D  00100      ││││                         load s1, 00
04E  14000      ││││                         compare s0, 00
04F  35451      ││││ ╭─⤙                     jump NZ, _LC00190
050  00101      ││││ │                       load s1, 01
051             ││││ │             _LC00190:
051             ││││ │              _L00148:
051  14100      ││││ ╰┬▶                     compare s1, 00
052  35054      ││││ ╭─⤙                     jump Z, _LC00191
053  34051      ││││ │╰⤙                     jump _L00148
054             ││││ │             _LC00191:
054             ││││ │                       ;	../common/serial.h:181: aux2 = eusart1RxTail;
054  06105      ││││ ╰─▶                     fetch s1, _eusart1RxTail
055             ││││                         ;	../common/serial.h:182: readValue = eusart1RxBuffer[aux2];
055  0020F      ││││                         load s2, _eusart1RxBuffer_7
056  19210      ││││                         add s2, s1
057  07320      ││││                         fetch s3, (s2)
058  01230      ││││                         load s2, s3
059             ││││                         ;	../common/serial.h:183: aux2++;
059  18101      ││││                         add s1, 01
05A             ││││                         ;	../common/serial.h:184: if(sizeof(eusart1RxBuffer) <= aux2)
05A  14108      ││││                         compare s1, 08
05B  3585D      ││││  ╭⤙                     jump C, _L00152
05C             ││││  │                      ;	../common/serial.h:186: aux2 = 0;
05C  00100      ││││  │                      load s1, 00
05D             ││││  │             _L00152:
05D             ││││  │                      ;	../common/serial.h:188: eusart1RxTail = aux2;
05D  2E105      ││││  ╰▶                     store s1, _eusart1RxTail
05E             ││││                         ;	../common/serial.h:190: intcon_disable_bit(UART_RX_INT_FLAG_BIT);
05E  2F0F0      ││││                         store s0, (sf)
05F  1CF01      ││││                         sub sf, 01
060  2F2F0      ││││                         store s2, (sf)
061  1CF01      ││││                         sub sf, 01
062  00B08      ││││                         load sb, 08
063  30019      ││╰────⤙                     call _intcon_disable_bit
064  18F01      ││ │                         add sf, 01
065  072F0      ││ │                         fetch s2, (sf)
066  18F01      ││ │                         add sf, 01
067  070F0      ││ │                         fetch s0, (sf)
068             ││ │                         ;	../common/serial.h:191: update_intcon();
068  2F0F0      ││ │                         store s0, (sf)
069  1CF01      ││ │                         sub sf, 01
06A  2F2F0      ││ │                         store s2, (sf)
06B  1CF01      ││ │                         sub sf, 01
06C  30010      │╰─────⤙                     call _update_intcon
06D  18F01      │  │                         add sf, 01
06E  072F0      │  │                         fetch s2, (sf)
06F  18F01      │  │                         add sf, 01
070  070F0      │  │                         fetch s0, (sf)
071             │  │                         ;	../common/serial.h:193: aux1--;
071  1C001      │  │                         sub s0, 01
072             │  │                         ;	../common/serial.h:194: eusart1RxCount = aux1;
072  2E006      │  │                         store s0, _eusart1RxCount
073             │  │                         ;	../common/serial.h:196: intcon_enable_bit(UART_RX_INT_FLAG_BIT);
073  2F2F0      │  │                         store s2, (sf)
074  1CF01      │  │                         sub sf, 01
075  00B08      │  │                         load sb, 08
076  30013      ╰──────⤙                     call _intcon_enable_bit
077  18F01      │  │                         add sf, 01
078  072F0      │  │                         fetch s2, (sf)
079             │  │                         ;	../common/serial.h:197: update_intcon();
079  2F2F0      │  │                         store s2, (sf)
07A  1CF01      │  │                         sub sf, 01
07B  30010      ╰──────⤙                     call _update_intcon
07C  18F01      │  │                         add sf, 01
07D  072F0      │  │                         fetch s2, (sf)
07E             │  │                         ;	../common/serial.h:199: return readValue;
07E  01B20      │  │                         load sb, s2
07F  2A000      │  │                         return
080             │  │                         ;	../common/serial.h:202: void EUSART1_Receive_ISR(void)
080             │  │    _EUSART1_Receive_ISR:
080             │  │                         ;	../common/serial.h:206: aux1 = eusart1RxHead;
080  06004      │╭─────▶                     fetch s0, _eusart1RxHead
081             ││ │                         ;	../common/serial.h:207: eusart1RxBuffer[aux1] = PBLAZEPORT[UART_RX];
081  0010F      ││ │                         load s1, _eusart1RxBuffer_7
082  19100      ││ │                         add s1, s0
083  04206      ││ │                         input s2, 06
084  2F210      ││ │                         store s2, (s1)
085             ││ │                         ;	../common/serial.h:208: aux1++;
085  18001      ││ │                         add s0, 01
086             ││ │                         ;	../common/serial.h:209: if(sizeof(eusart1RxBuffer) <= aux1)
086  14008      ││ │                         compare s0, 08
087  35889      ││ │  ╭⤙                     jump C, _L00159
088             ││ │  │                      ;	../common/serial.h:211: aux1 = 0;
088  00000      ││ │  │                      load s0, 00
089             ││ │  │             _L00159:
089             ││ │  │                      ;	../common/serial.h:213: eusart1RxHead = aux1;
089  2E004      ││ │  ╰▶                     store s0, _eusart1RxHead
08A             ││ │                         ;	../common/serial.h:215: aux2 = eusart1RxCount;
08A  06006      ││ │                         fetch s0, _eusart1RxCount
08B             ││ │                         ;	../common/serial.h:216: aux2++;
08B  18001      ││ │                         add s0, 01
08C             ││ │                         ;	../common/serial.h:217: eusart1RxCount = aux2;
08C  2E006      ││ │                         store s0, _eusart1RxCount
08D  2A000      ││ │                         return
08E             ││ │                         ;	test_serial.c:6: void main()
08E             ││ │                  _main:
08E             ││ │                         ;	test_serial.c:12: intcon = 0;
08E  00000      ╰──────▶                     load s0, 00
08F  2E000      ││ │                         store s0, _intcon
090             ││ │                         ;	test_serial.c:14: UART_setup();
090  30022      ╰──────⤙                     call _UART_setup
091             ││ │                         ;	test_serial.c:16: pbcc_enable_interrupt();
091  30020      ╰──────⤙                     call _pbcc_enable_interrupt
092             ││ │                         ;	test_serial.c:19: while(1) {
092             ││ │                _L00166:
092             ││ │                         ;	test_serial.c:20: if(eusart1RxCount) {
092  06006      ││ │╭─┬▶                     fetch s0, _eusart1RxCount
093  14000      ││ ││ │                      compare s0, 00
094  35496      ││ ││╭─⤙                     jump NZ, _LC00192
095  34092      ││ │││╰⤙                     jump _L00166
096             ││ │││             _LC00192:
096             ││ │││                       ;	test_serial.c:21: data = EUSART1_Read();
096  3004C      ││ ╰─┴─⤙                     call _EUSART1_Read
097  010B0      ││  │                        load s0, sb
098  01100      ││  │                        load s1, s0
099             ││  │                        ;	test_serial.c:22: PBLAZEPORT[PORTC_OUT] = data;
099  2C105      ││  │                        output s1, 05
09A  34092      ││  ╰──⤙                     jump _L00166
09B             ││                           ;	test_serial.c:53: void _interrupt_handler(void) __interrupt (1)
09B             ││       _interrupt_handler:
09B             ││                           ;	test_serial.c:57: flags = PBLAZEPORT[INT_IN_FLAGS];
09B  2F0F0      ││╭────▶                     store s0, (sf)
09C  1CF01      │││                          sub sf, 01
09D  04000      │││                          input s0, 00
09E  2F1F0      │││                          store s1, (sf)
09F  1CF01      │││                          sub sf, 01
0A0  01100      │││                          load s1, s0
0A1             │││                          ;	test_serial.c:59: if ((flags & UART_TX_INT_FLAG_BIT) && (intcon & UART_TX_INT_FLAG_BIT)) {
0A1  01010      │││                          load s0, s1
0A2  0A010      │││                          and s0, 10
0A3  14000      │││                          compare s0, 00
0A4  354A6      │││   ╭⤙                     jump NZ, _LC00193
0A5  340B0      │││ ╭──⤙                     jump _L00176
0A6             │││ │ │            _LC00193:
0A6  06000      │││ │ ╰▶                     fetch s0, _intcon
0A7  2F2F0      │││ │                        store s2, (sf)
0A8  1CF01      │││ │                        sub sf, 01
0A9  01200      │││ │                        load s2, s0
0AA  0A210      │││ │                        and s2, 10
0AB  14200      │││ │                        compare s2, 00
0AC  354AE      │││ │ ╭⤙                     jump NZ, _LC00194
0AD  340B0      │││ │╭─⤙                     jump _L00176
0AE             │││ │││            _LC00194:
0AE             │││ │││                      ;	test_serial.c:60: EUSART1_Transmit_ISR();
0AE  30036      ╰─────┴⤙                     call _EUSART1_Transmit_ISR
0AF  340BD       ││╭───⤙                     jump _L00179
0B0              │││││              _L00176:
0B0              │││││                       ;	test_serial.c:61: } else if ((flags & UART_RX_INT_FLAG_BIT) && (intcon & UART_RX_INT_FLAG_BIT)) {
0B0  01010       │││╰┴─▶                     load s0, s1
0B1  01200       │││                         load s2, s0
0B2  0A208       │││                         and s2, 08
0B3  14200       │││                         compare s2, 00
0B4  354B6       │││  ╭⤙                     jump NZ, _LC00195
0B5  340BD       │││╭──⤙                     jump _L00179
0B6              ││││ │            _LC00195:
0B6  06000       ││││ ╰▶                     fetch s0, _intcon
0B7  01200       ││││                        load s2, s0
0B8  0A208       ││││                        and s2, 08
0B9  14200       ││││                        compare s2, 00
0BA  354BC       ││││ ╭⤙                     jump NZ, _LC00196
0BB  340BD       ││││╭─⤙                     jump _L00179
0BC              ││││││            _LC00196:
0BC              ││││││                      ;	test_serial.c:62: EUSART1_Receive_ISR();
0BC  30080       ╰────┴⤙                     call _EUSART1_Receive_ISR
0BD               ││││              _L00179:
0BD  18F01        │╰┴┴─▶                     add sf, 01
0BE  072F0        │                          fetch s2, (sf)
0BF  18F01        │                          add sf, 01
0C0  071F0        │                          fetch s1, (sf)
0C1  18F01        │                          add sf, 01
0C2  070F0        │                          fetch s0, (sf)
0C3  38001        │                          returni ENABLE
3FF               │                          ;--------------------------------------------------------
3FF               │                          ; interrupt vector
3FF               │                          ;--------------------------------------------------------
3FF               │                          address 3ff
3FF  3409B        ╰────⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_serial/test_serial.psm


List of defined constants
-------------------------
    CONSTANT name              Value  Source PSM file
 ----------------              -----  ---------------
    BEL                        07
    BS                         08
    CR                         0D
    DCS                        90
    DEL                        7F
    ESC                        1B
    HT                         09
    LF                         0A
    NUL                        00
    ST                         9C
    VT                         0B
 *  _eusart1RxBuffer_0         16     test_serial.psm
 *  _eusart1RxBuffer_1         15     test_serial.psm
 *  _eusart1RxBuffer_2         14     test_serial.psm
 *  _eusart1RxBuffer_3         13     test_serial.psm
 *  _eusart1RxBuffer_4         12     test_serial.psm
 *  _eusart1RxBuffer_5         11     test_serial.psm
 *  _eusart1RxBuffer_6         10     test_serial.psm
    _eusart1RxBuffer_7         0f     test_serial.psm
    _eusart1RxCount            06     test_serial.psm
    _eusart1RxHead             04     test_serial.psm
    _eusart1RxTail             05     test_serial.psm
    _eusart1TxBufferRemaining  03     test_serial.psm
 *  _eusart1TxBuffer_0         0e     test_serial.psm
 *  _eusart1TxBuffer_1         0d     test_serial.psm
 *  _eusart1TxBuffer_2         0c     test_serial.psm
 *  _eusart1TxBuffer_3         0b     test_serial.psm
 *  _eusart1TxBuffer_4         0a     test_serial.psm
 *  _eusart1TxBuffer_5         09     test_serial.psm
 *  _eusart1TxBuffer_6         08     test_serial.psm
    _eusart1TxBuffer_7         07     test_serial.psm
    _eusart1TxHead             01     test_serial.psm
    _eusart1TxTail             02     test_serial.psm
    _intcon                    00     test_serial.psm
    datestamp_day              1E
    datestamp_month            09
    datestamp_year             13
    timestamp_hours            00
    timestamp_minutes          08
    timestamp_seconds          34

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "30 Sep 2019"
    timestamp$       "00:08:52"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _EUSART1_Read            04C   test_serial.psm
    _EUSART1_Receive_ISR     080   test_serial.psm
    _EUSART1_Transmit_ISR    036   test_serial.psm
 *  _EUSART1_Write           036   test_serial.psm
 *  _EUSART1_is_tx_ready     036   test_serial.psm
    _L00113                  036   test_serial.psm
    _L00120                  036   test_serial.psm
    _L00127                  036   test_serial.psm
    _L00131                  036   test_serial.psm
    _L00140                  045   test_serial.psm
    _L00142                  048   test_serial.psm
    _L00144                  04B   test_serial.psm
    _L00148                  051   test_serial.psm
    _L00152                  05D   test_serial.psm
    _L00159                  089   test_serial.psm
    _L00166                  092   test_serial.psm
    _L00176                  0B0   test_serial.psm
    _L00179                  0BD   test_serial.psm
    _LC00185                 036   test_serial.psm
    _LC00186                 036   test_serial.psm
    _LC00187                 036   test_serial.psm
    _LC00188                 036   test_serial.psm
    _LC00189                 03A   test_serial.psm
    _LC00190                 051   test_serial.psm
    _LC00191                 054   test_serial.psm
    _LC00192                 096   test_serial.psm
    _LC00193                 0A6   test_serial.psm
    _LC00194                 0AE   test_serial.psm
    _LC00195                 0B6   test_serial.psm
    _LC00196                 0BC   test_serial.psm
    _UART_setup              022   test_serial.psm
    __sdcc_loop              00F   test_serial.psm
    __sdcc_program_startup   00E   test_serial.psm
 *  _getchar                 036   test_serial.psm
    _intcon_disable_bit      019   test_serial.psm
    _intcon_enable_bit       013   test_serial.psm
    _interrupt_handler       09B   test_serial.psm
    _main                    08E   test_serial.psm
 *  _pbcc_disable_interrupt  022   test_serial.psm
    _pbcc_enable_interrupt   020   test_serial.psm
 *  _putchar                 036   test_serial.psm
    _update_intcon           010   test_serial.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          17
   ADDCY        -
   AND          5
   CALL         14
   COMPARE      11
   DISABLE      -
   ENABLE       1
   FETCH        23
   INPUT        2
   JUMP         24
   LOAD         42
   OR           1
   OUTPUT       5
   RETURN       8
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        32
   SUB          10
   SUBCY        -
   TEST         -
   XOR          1
