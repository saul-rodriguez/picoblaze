Open PicoBlaze Assembler log for program "test_serial.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-30T21:45:17
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 241
  Memory locations available: 783
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 67
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Mon Sep 30 21:45:09 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _intcon, 00
000                                          constant _eusart1TxHead, 01
000                                          constant _eusart1TxTail, 02
000                                          constant _eusart1TxBufferRemaining, 03
000                                          constant _eusart1RxHead, 04
000                                          constant _eusart1RxTail, 05
000                                          constant _eusart1RxCount, 06
000                                          constant _eusart1TxBuffer_7, 07
000                                          constant _eusart1TxBuffer_6, 08
000                                          constant _eusart1TxBuffer_5, 09
000                                          constant _eusart1TxBuffer_4, 0a
000                                          constant _eusart1TxBuffer_3, 0b
000                                          constant _eusart1TxBuffer_2, 0c
000                                          constant _eusart1TxBuffer_1, 0d
000                                          constant _eusart1TxBuffer_0, 0e
000                                          constant _eusart1RxBuffer_7, 0f
000                                          constant _eusart1RxBuffer_6, 10
000                                          constant _eusart1RxBuffer_5, 11
000                                          constant _eusart1RxBuffer_4, 12
000                                          constant _eusart1RxBuffer_3, 13
000                                          constant _eusart1RxBuffer_2, 14
000                                          constant _eusart1RxBuffer_1, 15
000                                          constant _eusart1RxBuffer_0, 16

000                                          ;	../common/bamse.h:37: volatile unsigned char intcon = 0;
000  00000                                   load s0, 00
001  2E000                                   store s0, _intcon
002                                          ;	../common/serial.h:27: volatile unsigned char eusart1TxHead = 0;
002  00000                                   load s0, 00
003  2E001                                   store s0, _eusart1TxHead
004                                          ;	../common/serial.h:28: volatile unsigned char eusart1TxTail = 0;
004  00000                                   load s0, 00
005  2E002                                   store s0, _eusart1TxTail
006                                          ;	../common/serial.h:30: volatile unsigned char eusart1TxBufferRemaining = 0;
006  00000                                   load s0, 00
007  2E003                                   store s0, _eusart1TxBufferRemaining
008                                          ;	../common/serial.h:31: volatile unsigned char eusart1RxHead = 0;
008  00000                                   load s0, 00
009  2E004                                   store s0, _eusart1RxHead
00A                                          ;	../common/serial.h:32: volatile unsigned char eusart1RxTail = 0;
00A  00000                                   load s0, 00
00B  2E005                                   store s0, _eusart1RxTail
00C  00F3F                                   load sf, 3f
00D  3400E            ╭⤙                     jump __sdcc_program_startup
00E                   │                      ;--------------------------------------------------------
00E                   │                      ; Home
00E                   │                      ;--------------------------------------------------------
00E                   │ __sdcc_program_startup:
00E  300B8      ╭─────┴⤙                     call _main
00F             │                            ;	return from main will lock up
00F             │               __sdcc_loop:
00F  3400F      │     ╰▶                     jump __sdcc_loop
010             │                            ;--------------------------------------------------------
010             │                            ; code
010             │                            ;--------------------------------------------------------
010             │                            ;	../common/bamse.h:39: void update_intcon(void)
010             │            _update_intcon:
010             │                            ;	../common/bamse.h:41: PBLAZEPORT[INT_OUT_CONFIG] = intcon;
010  06000      ╭──────▶                     fetch s0, _intcon
011  2C000      │                            output s0, 00
012  2A000      │                            return
013             │                            ;	../common/bamse.h:44: void intcon_enable_bit(unsigned char pos)
013             │        _intcon_enable_bit:
013  010B0      ╭┬─────▶                     load s0, sb
014             ││                           ;	../common/bamse.h:46: intcon |= pos;
014  06100      ││                           fetch s1, _intcon
015  01210      ││                           load s2, s1
016  0D200      ││                           or s2, s0
017  2E200      ││                           store s2, _intcon
018  2A000      ││                           return
019             ││                           ;	../common/bamse.h:50: void intcon_disable_bit(unsigned char pos)
019             ││      _intcon_disable_bit:
019  010B0      ╭──────▶                     load s0, sb
01A             ││                           ;	../common/bamse.h:52: intcon &= (~pos);
01A  0E0FF      ││                           xor s0, ff
01B  06100      ││                           fetch s1, _intcon
01C  01210      ││                           load s2, s1
01D  0B200      ││                           and s2, s0
01E  2E200      ││                           store s2, _intcon
01F  2A000      ││                           return
020             ││                           ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
020             ││      _pbcc_enable_interrupt:
020             ││                           ;	device/include/pblaze/intr.h:34: __endasm;
020  3C001      ╭──────▶                     enable INTERRUPT
021  2A000      ││                           return
022             ││                           ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
022             ││      _pbcc_disable_interrupt:
022             ││                           ;	device/include/pblaze/intr.h:41: __endasm;
                ││                           ;
022             ││                           ;REMOVED: disable INTERRUPT
022             ││                           ;REMOVED: return
022             ││                           ;	../common/delay.h:28: void delay()
022             ││                   _delay:
022             ││                           ;	../common/delay.h:35: __endasm;
022             ││                           ;REMOVED: load s0, 0xb2
022             ││                    rpt11:
022  18001      ││   ╭┬▶                     add s0, 01
023  35422      ││   │╰⤙                     jump NZ, rpt11
024  2A000      ││   │                       return
025             ││   │                       ;	../common/delay.h:38: void delay_10us_fixed()
025             ││   │    _delay_10us_fixed:
025             ││   │                       ;	../common/delay.h:45: __endasm;
025  000B6      ││ ╭───▶                     load s0, 0xb6
026             ││ │ │                rpt22:
026  18001      ││ │ │                       add s0, 01
027  35422      ││ │ ╰─⤙                     jump NZ, rpt11
028  2A000      ││ │                         return
029             ││ │                         ;	../common/delay.h:48: void delay_10us(unsigned char time)
029             ││ │            _delay_10us:
029  010B0      ││╭────▶                     load s0, sb
02A             ││││                         ;	../common/delay.h:52: for (i=0; i<time; i++)  {
02A  00100      ││││                         load s1, 00
02B             ││││                _L00115:
02B  15100      ││││ ╭─▶                     compare s1, s0
02C  3582E      ││││ │╭⤙                     jump C, _LC00207
02D  34039      ││││╭──⤙                     jump _L00123
02E             │││││││            _LC00207:
02E             │││││││                      ;	../common/delay.h:53: delay_10us_fixed();
02E  2F0F0      ││││││╰▶                     store s0, (sf)
02F  1CF01      ││││││                       sub sf, 01
030  2F1F0      ││││││                       store s1, (sf)
031  1CF01      ││││││                       sub sf, 01
032  30025      │││╰───⤙                     call _delay_10us_fixed
033  18F01      │││ ││                       add sf, 01
034  071F0      │││ ││                       fetch s1, (sf)
035  18F01      │││ ││                       add sf, 01
036  070F0      │││ ││                       fetch s0, (sf)
037             │││ ││                       ;	../common/delay.h:52: for (i=0; i<time; i++)  {
037  18101      │││ ││                       add s1, 01
038  3402B      │││ │╰─⤙                     jump _L00115
039             │││ │               _L00123:
039  2A000      │││ ╰──▶                     return
03A             │││                          ;	../common/delay.h:57: void delay_ms(unsigned char time)
03A             │││               _delay_ms:
03A  010B0      ╭──────▶                     load s0, sb
03B             │││                          ;	../common/delay.h:61: for (i=0; i<time; i++)  {
03B  00100      │││                          load s1, 00
03C             │││                 _L00124:
03C  15100      │││  ╭─▶                     compare s1, s0
03D  3583F      │││  │╭⤙                     jump C, _LC00208
03E  3404B      │││ ╭──⤙                     jump _L00132
03F             │││ │││            _LC00208:
03F             │││ │││                      ;	../common/delay.h:62: delay_10us(100);
03F  2F0F0      │││ ││╰▶                     store s0, (sf)
040  1CF01      │││ ││                       sub sf, 01
041  2F1F0      │││ ││                       store s1, (sf)
042  1CF01      │││ ││                       sub sf, 01
043  00B64      │││ ││                       load sb, 64
044  30029      ││╰────⤙                     call _delay_10us
045  18F01      ││  ││                       add sf, 01
046  071F0      ││  ││                       fetch s1, (sf)
047  18F01      ││  ││                       add sf, 01
048  070F0      ││  ││                       fetch s0, (sf)
049             ││  ││                       ;	../common/delay.h:61: for (i=0; i<time; i++)  {
049  18101      ││  ││                       add s1, 01
04A  3403C      ││  │╰─⤙                     jump _L00124
04B             ││  │               _L00132:
04B  2A000      ││  ╰──▶                     return
04C             ││                           ;	../common/serial.h:55: void UART_setup()
04C             ││              _UART_setup:
04C             ││                           ;	../common/serial.h:57: PBLAZEPORT[UART_OUT_CONFIG_L] = UART_CLK_BIT_L;
04C  00005      ╭──────▶                     load s0, 05
04D  2C007      ││                           output s0, 07
04E             ││                           ;	../common/serial.h:58: PBLAZEPORT[UART_OUT_CONFIG_H] = UART_CLK_BIT_H;
04E  0000D      ││                           load s0, 0d
04F  2C008      ││                           output s0, 08
050             ││                           ;	../common/serial.h:61: eusart1TxHead = 0;
050  00000      ││                           load s0, 00
051  2E001      ││                           store s0, _eusart1TxHead
052             ││                           ;	../common/serial.h:62: eusart1TxTail = 0;
052  00000      ││                           load s0, 00
053  2E002      ││                           store s0, _eusart1TxTail
054             ││                           ;	../common/serial.h:63: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
054  00008      ││                           load s0, 08
055  2E003      ││                           store s0, _eusart1TxBufferRemaining
056             ││                           ;	../common/serial.h:65: eusart1RxHead = 0;
056  00000      ││                           load s0, 00
057  2E004      ││                           store s0, _eusart1RxHead
058             ││                           ;	../common/serial.h:66: eusart1RxTail = 0;
058  00000      ││                           load s0, 00
059  2E005      ││                           store s0, _eusart1RxTail
05A             ││                           ;	../common/serial.h:67: eusart1RxCount = 0;
05A  00000      ││                           load s0, 00
05B  2E006      ││                           store s0, _eusart1RxCount
05C             ││                           ;	../common/serial.h:70: intcon_enable_bit(UART_RX_INT_FLAG_BIT);
05C  00B08      ││                           load sb, 08
05D  30013      │╰─────⤙                     call _intcon_enable_bit
05E             │                            ;	../common/serial.h:71: update_intcon();
05E  30010      ╰──────⤙                     call _update_intcon
05F  2A000      │                            return
060             │                            ;	../common/serial.h:76: unsigned char getchar()
060             │                  _getchar:
060             │                            ;	../common/serial.h:80: do {
060             │                   _L00135:
060             │                            ;	../common/serial.h:81: flags = PBLAZEPORT[INT_IN_FLAGS];
060             │                            ;REMOVED: input s0, 00
060             │                            ;	../common/serial.h:82: rx = flags & UART_RX_INT_FLAG_BIT;
060             │                            ;REMOVED: and s0, 08
060             │                            ;	../common/serial.h:83: } while (!rx);
060             │                            ;REMOVED: compare s0, 00
060             │                            ;REMOVED: jump NZ, _LC00209
060             │                            ;REMOVED: jump _L00135
060             │                  _LC00209:
060             │                            ;	../common/serial.h:85: return PBLAZEPORT[UART_RX];
060             │                            ;REMOVED: input s0, 06
060             │                            ;REMOVED: load sb, s0
060             │                            ;REMOVED: return
060             │                            ;	../common/serial.h:89: void putchar(unsigned char data)
060             │                  _putchar:
060             │                            ;REMOVED: load s0, sb
060             │                            ;	../common/serial.h:93: do {
060             │                   _L00142:
060             │                            ;	../common/serial.h:94: flags = PBLAZEPORT[INT_IN_FLAGS];
060             │                            ;REMOVED: input s1, 00
060             │                            ;	../common/serial.h:95: tx = flags & UART_TX_INT_FLAG_BIT;
060             │                            ;REMOVED: and s1, 10
060             │                            ;	../common/serial.h:96: } while (!tx);
060             │                            ;REMOVED: compare s1, 00
060             │                            ;REMOVED: jump NZ, _LC00210
060             │                            ;REMOVED: jump _L00142
060             │                  _LC00210:
060             │                            ;	../common/serial.h:98: PBLAZEPORT[UART_TX] = data;
060             │                            ;REMOVED: output s0, 09
060             │                            ;REMOVED: return
060             │                            ;	../common/serial.h:104: void EUSART1_Write(unsigned char txData)
060             │            _EUSART1_Write:
060             │                            ;REMOVED: load s0, sb
060             │                            ;	../common/serial.h:107: aux = eusart1TxBufferRemaining;
060             │                            ;REMOVED: fetch s1, _eusart1TxBufferRemaining
060             │                            ;	../common/serial.h:109: while(0 == aux)
060             │                            ;REMOVED: load s2, 00
060             │                            ;REMOVED: compare s1, 00
060             │                            ;REMOVED: jump NZ, _LC00211
060             │                            ;REMOVED: load s2, 01
060             │                  _LC00211:
060             │                   _L00149:
060             │                            ;REMOVED: compare s2, 00
060             │                            ;REMOVED: jump Z, _LC00212
060             │                            ;REMOVED: jump _L00149
060             │                  _LC00212:
060             │                            ;	../common/serial.h:113: intcon_disable_bit(UART_TX_INT_FLAG_BIT);
060             │                            ;REMOVED: store s0, (sf)
060             │                            ;REMOVED: sub sf, 01
060             │                            ;REMOVED: store s1, (sf)
060             │                            ;REMOVED: sub sf, 01
060             │                            ;REMOVED: load sb, 10
060             │                            ;REMOVED: call _intcon_disable_bit
060             │                            ;REMOVED: add sf, 01
060             │                            ;REMOVED: fetch s1, (sf)
060             │                            ;REMOVED: add sf, 01
060             │                            ;REMOVED: fetch s0, (sf)
060             │                            ;	../common/serial.h:114: update_intcon();
060             │                            ;REMOVED: store s0, (sf)
060             │                            ;REMOVED: sub sf, 01
060             │                            ;REMOVED: store s1, (sf)
060             │                            ;REMOVED: sub sf, 01
060             │                            ;REMOVED: call _update_intcon
060             │                            ;REMOVED: add sf, 01
060             │                            ;REMOVED: fetch s1, (sf)
060             │                            ;REMOVED: add sf, 01
060             │                            ;REMOVED: fetch s0, (sf)
060             │                            ;	../common/serial.h:116: eusart1TxBuffer[eusart1TxHead++] = txData;
060             │                            ;REMOVED: load s2, _eusart1TxBuffer_7
060             │                            ;REMOVED: fetch s3, _eusart1TxHead
060             │                            ;REMOVED: fetch s4, _eusart1TxHead
060             │                            ;REMOVED: add s4, 01
060             │                            ;REMOVED: add s2, s3
060             │                            ;REMOVED: store s0, (s2)
060             │                            ;	../common/serial.h:117: if(sizeof(eusart1TxBuffer) <= eusart1TxHead) {
060             │                            ;REMOVED: compare s4, 08
060             │                            ;REMOVED: jump C, _L00153
060             │                            ;	../common/serial.h:118: eusart1TxHead = 0;
060             │                            ;REMOVED: load s0, 00
060             │                            ;REMOVED: store s0, _eusart1TxHead
060             │                   _L00153:
060             │                            ;	../common/serial.h:121: aux--;
060             │                            ;REMOVED: sub s1, 01
060             │                            ;	../common/serial.h:122: eusart1TxBufferRemaining = aux;
060             │                            ;REMOVED: store s1, _eusart1TxBufferRemaining
060             │                            ;	../common/serial.h:124: intcon_enable_bit(UART_TX_INT_FLAG_BIT);
060             │                            ;REMOVED: store s4, _eusart1TxHead
060             │                            ;REMOVED: load sb, 10
060             │                            ;REMOVED: call _intcon_enable_bit
060             │                            ;	../common/serial.h:125: update_intcon();
060             │                            ;REMOVED: call _update_intcon
060             │                            ;REMOVED: return
060             │                            ;	../common/serial.h:129: unsigned char EUSART1_is_tx_ready(void)
060             │       _EUSART1_is_tx_ready:
060             │                            ;	../common/serial.h:131: return eusart1TxBufferRemaining;
060             │                            ;REMOVED: fetch s0, _eusart1TxBufferRemaining
060             │                            ;REMOVED: load sb, s0
060             │                            ;REMOVED: return
060             │                            ;	../common/serial.h:134: void EUSART1_Transmit_ISR(void)
060             │       _EUSART1_Transmit_ISR:
060             │                            ;	../common/serial.h:139: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
060  06003      ╭──────▶                     fetch s0, _eusart1TxBufferRemaining
061  14008      │                            compare s0, 08
062  35864      │     ╭⤙                     jump C, _LC00213
063  34072      │    ╭─⤙                     jump _L00164
064             │    ││            _LC00213:
064             │    ││                      ;	../common/serial.h:143: aux1 = eusart1TxTail;
064  06102      │    │╰▶                     fetch s1, _eusart1TxTail
065             │    │                       ;	../common/serial.h:144: PBLAZEPORT[UART_TX] = eusart1TxBuffer[aux1];
065  00207      │    │                       load s2, _eusart1TxBuffer_7
066  19210      │    │                       add s2, s1
067  07320      │    │                       fetch s3, (s2)
068  2C309      │    │                       output s3, 09
069             │    │                       ;	../common/serial.h:145: aux1++;
069  18101      │    │                       add s1, 01
06A             │    │                       ;	../common/serial.h:146: eusart1TxTail = aux1;
06A  2E102      │    │                       store s1, _eusart1TxTail
06B             │    │                       ;	../common/serial.h:149: if(sizeof(eusart1TxBuffer) <= aux1)
06B  14108      │    │                       compare s1, 08
06C  3586F      │    │╭⤙                     jump C, _L00162
06D             │    ││                      ;	../common/serial.h:152: eusart1TxTail = aux1;
06D  00200      │    ││                      load s2, 00
06E  2E202      │    ││                      store s2, _eusart1TxTail
06F             │    ││             _L00162:
06F             │    ││                      ;	../common/serial.h:155: aux1 = eusart1TxBufferRemaining;
06F             │    ││                      ;	../common/serial.h:156: aux1++;
06F  18001      │    │╰▶                     add s0, 01
070             │    │                       ;	../common/serial.h:158: eusart1TxBufferRemaining = aux1;
070  2E003      │    │                       store s0, _eusart1TxBufferRemaining
071  34075      │    │╭⤙                     jump _L00166
072             │    ││             _L00164:
072             │    ││                      ;	../common/serial.h:163: intcon_disable_bit(UART_TX_INT_FLAG_BIT);
072  00B10      │    ╰─▶                     load sb, 10
073  30019      ╰──────⤙                     call _intcon_disable_bit
074             │     │                      ;	../common/serial.h:164: update_intcon();
074  30010      ╰──────⤙                     call _update_intcon
075             │     │             _L00166:
075  2A000      │     ╰▶                     return
076             │                            ;	../common/serial.h:170: unsigned char EUSART1_Read(void)
076             │             _EUSART1_Read:
076             │                            ;	../common/serial.h:174: aux1 = eusart1RxCount;
076  06006      │  ╭───▶                     fetch s0, _eusart1RxCount
077             │  │                         ;	../common/serial.h:175: while(0 == aux1)
077  00100      │  │                         load s1, 00
078  14000      │  │                         compare s0, 00
079  3547B      │  │ ╭─⤙                     jump NZ, _LC00214
07A  00101      │  │ │                       load s1, 01
07B             │  │ │             _LC00214:
07B             │  │ │              _L00170:
07B  14100      │  │ ╰┬▶                     compare s1, 00
07C  3507E      │  │ ╭─⤙                     jump Z, _LC00215
07D  3407B      │  │ │╰⤙                     jump _L00170
07E             │  │ │             _LC00215:
07E             │  │ │                       ;	../common/serial.h:181: aux2 = eusart1RxTail;
07E  06105      │  │ ╰─▶                     fetch s1, _eusart1RxTail
07F             │  │                         ;	../common/serial.h:182: readValue = eusart1RxBuffer[aux2];
07F  0020F      │  │                         load s2, _eusart1RxBuffer_7
080  19210      │  │                         add s2, s1
081  07320      │  │                         fetch s3, (s2)
082  01230      │  │                         load s2, s3
083             │  │                         ;	../common/serial.h:183: aux2++;
083  18101      │  │                         add s1, 01
084             │  │                         ;	../common/serial.h:184: if(sizeof(eusart1RxBuffer) <= aux2)
084  14108      │  │                         compare s1, 08
085  35887      │  │  ╭⤙                     jump C, _L00174
086             │  │  │                      ;	../common/serial.h:186: aux2 = 0;
086  00100      │  │  │                      load s1, 00
087             │  │  │             _L00174:
087             │  │  │                      ;	../common/serial.h:188: eusart1RxTail = aux2;
087  2E105      │  │  ╰▶                     store s1, _eusart1RxTail
088             │  │                         ;	../common/serial.h:190: intcon_disable_bit(UART_RX_INT_FLAG_BIT);
088  2F0F0      │  │                         store s0, (sf)
089  1CF01      │  │                         sub sf, 01
08A  2F2F0      │  │                         store s2, (sf)
08B  1CF01      │  │                         sub sf, 01
08C  00B08      │  │                         load sb, 08
08D  30019      ╰──────⤙                     call _intcon_disable_bit
08E  18F01      │  │                         add sf, 01
08F  072F0      │  │                         fetch s2, (sf)
090  18F01      │  │                         add sf, 01
091  070F0      │  │                         fetch s0, (sf)
092             │  │                         ;	../common/serial.h:191: update_intcon();
092  2F0F0      │  │                         store s0, (sf)
093  1CF01      │  │                         sub sf, 01
094  2F2F0      │  │                         store s2, (sf)
095  1CF01      │  │                         sub sf, 01
096  30010      ╰──────⤙                     call _update_intcon
097  18F01      │  │                         add sf, 01
098  072F0      │  │                         fetch s2, (sf)
099  18F01      │  │                         add sf, 01
09A  070F0      │  │                         fetch s0, (sf)
09B             │  │                         ;	../common/serial.h:193: aux1--;
09B  1C001      │  │                         sub s0, 01
09C             │  │                         ;	../common/serial.h:194: eusart1RxCount = aux1;
09C  2E006      │  │                         store s0, _eusart1RxCount
09D             │  │                         ;	../common/serial.h:196: intcon_enable_bit(UART_RX_INT_FLAG_BIT);
09D  2F2F0      │  │                         store s2, (sf)
09E  1CF01      │  │                         sub sf, 01
09F  00B08      │  │                         load sb, 08
0A0  30013      ╰──────⤙                     call _intcon_enable_bit
0A1  18F01      │  │                         add sf, 01
0A2  072F0      │  │                         fetch s2, (sf)
0A3             │  │                         ;	../common/serial.h:197: update_intcon();
0A3  2F2F0      │  │                         store s2, (sf)
0A4  1CF01      │  │                         sub sf, 01
0A5  30010      ╰──────⤙                     call _update_intcon
0A6  18F01      │  │                         add sf, 01
0A7  072F0      │  │                         fetch s2, (sf)
0A8             │  │                         ;	../common/serial.h:199: return readValue;
0A8  01B20      │  │                         load sb, s2
0A9  2A000      │  │                         return
0AA             │  │                         ;	../common/serial.h:202: void EUSART1_Receive_ISR(void)
0AA             │  │    _EUSART1_Receive_ISR:
0AA             │  │                         ;	../common/serial.h:206: aux1 = eusart1RxHead;
0AA  06004      │╭─────▶                     fetch s0, _eusart1RxHead
0AB             ││ │                         ;	../common/serial.h:207: eusart1RxBuffer[aux1] = PBLAZEPORT[UART_RX];
0AB  0010F      ││ │                         load s1, _eusart1RxBuffer_7
0AC  19100      ││ │                         add s1, s0
0AD  04206      ││ │                         input s2, 06
0AE  2F210      ││ │                         store s2, (s1)
0AF             ││ │                         ;	../common/serial.h:208: aux1++;
0AF  18001      ││ │                         add s0, 01
0B0             ││ │                         ;	../common/serial.h:209: if(sizeof(eusart1RxBuffer) <= aux1)
0B0  14008      ││ │                         compare s0, 08
0B1  358B3      ││ │  ╭⤙                     jump C, _L00181
0B2             ││ │  │                      ;	../common/serial.h:211: aux1 = 0;
0B2  00000      ││ │  │                      load s0, 00
0B3             ││ │  │             _L00181:
0B3             ││ │  │                      ;	../common/serial.h:213: eusart1RxHead = aux1;
0B3  2E004      ││ │  ╰▶                     store s0, _eusart1RxHead
0B4             ││ │                         ;	../common/serial.h:215: aux2 = eusart1RxCount;
0B4  06006      ││ │                         fetch s0, _eusart1RxCount
0B5             ││ │                         ;	../common/serial.h:216: aux2++;
0B5  18001      ││ │                         add s0, 01
0B6             ││ │                         ;	../common/serial.h:217: eusart1RxCount = aux2;
0B6  2E006      ││ │                         store s0, _eusart1RxCount
0B7  2A000      ││ │                         return
0B8             ││ │                         ;	test_serial.c:6: void main()
0B8             ││ │                  _main:
0B8             ││ │                         ;	test_serial.c:12: intcon = 0;
0B8  00000      ╰──────▶                     load s0, 00
0B9  2E000      ││ │                         store s0, _intcon
0BA             ││ │                         ;	test_serial.c:14: UART_setup();
0BA  3004C      ╰──────⤙                     call _UART_setup
0BB             ││ │                         ;	test_serial.c:16: pbcc_enable_interrupt();
0BB  30020      ╰──────⤙                     call _pbcc_enable_interrupt
0BC             ││ │                         ;	test_serial.c:18: delay_ms(4);
0BC  00B04      ││ │                         load sb, 04
0BD  3003A      ╰──────⤙                     call _delay_ms
0BE             ││ │                         ;	test_serial.c:19: while(1) {
0BE             ││ │                _L00188:
0BE             ││ │                         ;	test_serial.c:21: if(eusart1RxCount) {
0BE  06006      ││ │╭─┬▶                     fetch s0, _eusart1RxCount
0BF  14000      ││ ││ │                      compare s0, 00
0C0  354C2      ││ ││╭─⤙                     jump NZ, _LC00216
0C1  340BE      ││ │││╰⤙                     jump _L00188
0C2             ││ │││             _LC00216:
0C2             ││ │││                       ;	test_serial.c:22: data = EUSART1_Read();
0C2  30076      ││ ╰─┴─⤙                     call _EUSART1_Read
0C3  010B0      ││  │                        load s0, sb
0C4  01100      ││  │                        load s1, s0
0C5             ││  │                        ;	test_serial.c:23: PBLAZEPORT[PORTC_OUT] = data;
0C5  2C105      ││  │                        output s1, 05
0C6  340BE      ││  ╰──⤙                     jump _L00188
0C7             ││                           ;	test_serial.c:54: void _interrupt_handler(void) __interrupt (1)
0C7             ││       _interrupt_handler:
0C7             ││                           ;	test_serial.c:58: flags = PBLAZEPORT[INT_IN_FLAGS];
0C7  2F0F0      ││╭────▶                     store s0, (sf)
0C8  1CF01      │││                          sub sf, 01
0C9  04000      │││                          input s0, 00
0CA  2F1F0      │││                          store s1, (sf)
0CB  1CF01      │││                          sub sf, 01
0CC  01100      │││                          load s1, s0
0CD             │││                          ;	test_serial.c:60: if ((flags & UART_TX_INT_FLAG_BIT) && (intcon & UART_TX_INT_FLAG_BIT)) {
0CD  01010      │││                          load s0, s1
0CE  0A010      │││                          and s0, 10
0CF  14000      │││                          compare s0, 00
0D0  354D2      │││   ╭⤙                     jump NZ, _LC00217
0D1  340DC      │││ ╭──⤙                     jump _L00198
0D2             │││ │ │            _LC00217:
0D2  06000      │││ │ ╰▶                     fetch s0, _intcon
0D3  2F2F0      │││ │                        store s2, (sf)
0D4  1CF01      │││ │                        sub sf, 01
0D5  01200      │││ │                        load s2, s0
0D6  0A210      │││ │                        and s2, 10
0D7  14200      │││ │                        compare s2, 00
0D8  354DA      │││ │ ╭⤙                     jump NZ, _LC00218
0D9  340DC      │││ │╭─⤙                     jump _L00198
0DA             │││ │││            _LC00218:
0DA             │││ │││                      ;	test_serial.c:61: EUSART1_Transmit_ISR();
0DA  30060      ╰─────┴⤙                     call _EUSART1_Transmit_ISR
0DB  340E9       ││╭───⤙                     jump _L00201
0DC              │││││              _L00198:
0DC              │││││                       ;	test_serial.c:62: } else if ((flags & UART_RX_INT_FLAG_BIT) && (intcon & UART_RX_INT_FLAG_BIT)) {
0DC  01010       │││╰┴─▶                     load s0, s1
0DD  01200       │││                         load s2, s0
0DE  0A208       │││                         and s2, 08
0DF  14200       │││                         compare s2, 00
0E0  354E2       │││  ╭⤙                     jump NZ, _LC00219
0E1  340E9       │││╭──⤙                     jump _L00201
0E2              ││││ │            _LC00219:
0E2  06000       ││││ ╰▶                     fetch s0, _intcon
0E3  01200       ││││                        load s2, s0
0E4  0A208       ││││                        and s2, 08
0E5  14200       ││││                        compare s2, 00
0E6  354E8       ││││ ╭⤙                     jump NZ, _LC00220
0E7  340E9       ││││╭─⤙                     jump _L00201
0E8              ││││││            _LC00220:
0E8              ││││││                      ;	test_serial.c:63: EUSART1_Receive_ISR();
0E8  300AA       ╰────┴⤙                     call _EUSART1_Receive_ISR
0E9               ││││              _L00201:
0E9  18F01        │╰┴┴─▶                     add sf, 01
0EA  072F0        │                          fetch s2, (sf)
0EB  18F01        │                          add sf, 01
0EC  071F0        │                          fetch s1, (sf)
0ED  18F01        │                          add sf, 01
0EE  070F0        │                          fetch s0, (sf)
0EF  38001        │                          returni ENABLE
3FF               │                          ;--------------------------------------------------------
3FF               │                          ; interrupt vector
3FF               │                          ;--------------------------------------------------------
3FF               │                          address 3ff
3FF  340C7        ╰────⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_serial/test_serial.psm


List of defined constants
-------------------------
    CONSTANT name              Value  Source PSM file
 ----------------              -----  ---------------
    BEL                        07
    BS                         08
    CR                         0D
    DCS                        90
    DEL                        7F
    ESC                        1B
    HT                         09
    LF                         0A
    NUL                        00
    ST                         9C
    VT                         0B
 *  _eusart1RxBuffer_0         16     test_serial.psm
 *  _eusart1RxBuffer_1         15     test_serial.psm
 *  _eusart1RxBuffer_2         14     test_serial.psm
 *  _eusart1RxBuffer_3         13     test_serial.psm
 *  _eusart1RxBuffer_4         12     test_serial.psm
 *  _eusart1RxBuffer_5         11     test_serial.psm
 *  _eusart1RxBuffer_6         10     test_serial.psm
    _eusart1RxBuffer_7         0f     test_serial.psm
    _eusart1RxCount            06     test_serial.psm
    _eusart1RxHead             04     test_serial.psm
    _eusart1RxTail             05     test_serial.psm
    _eusart1TxBufferRemaining  03     test_serial.psm
 *  _eusart1TxBuffer_0         0e     test_serial.psm
 *  _eusart1TxBuffer_1         0d     test_serial.psm
 *  _eusart1TxBuffer_2         0c     test_serial.psm
 *  _eusart1TxBuffer_3         0b     test_serial.psm
 *  _eusart1TxBuffer_4         0a     test_serial.psm
 *  _eusart1TxBuffer_5         09     test_serial.psm
 *  _eusart1TxBuffer_6         08     test_serial.psm
    _eusart1TxBuffer_7         07     test_serial.psm
    _eusart1TxHead             01     test_serial.psm
    _eusart1TxTail             02     test_serial.psm
    _intcon                    00     test_serial.psm
    datestamp_day              1E
    datestamp_month            09
    datestamp_year             13
    timestamp_hours            15
    timestamp_minutes          2D
    timestamp_seconds          11

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "30 Sep 2019"
    timestamp$       "21:45:17"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _EUSART1_Read            076   test_serial.psm
    _EUSART1_Receive_ISR     0AA   test_serial.psm
    _EUSART1_Transmit_ISR    060   test_serial.psm
 *  _EUSART1_Write           060   test_serial.psm
 *  _EUSART1_is_tx_ready     060   test_serial.psm
    _L00115                  02B   test_serial.psm
    _L00123                  039   test_serial.psm
    _L00124                  03C   test_serial.psm
    _L00132                  04B   test_serial.psm
    _L00135                  060   test_serial.psm
    _L00142                  060   test_serial.psm
    _L00149                  060   test_serial.psm
    _L00153                  060   test_serial.psm
    _L00162                  06F   test_serial.psm
    _L00164                  072   test_serial.psm
    _L00166                  075   test_serial.psm
    _L00170                  07B   test_serial.psm
    _L00174                  087   test_serial.psm
    _L00181                  0B3   test_serial.psm
    _L00188                  0BE   test_serial.psm
    _L00198                  0DC   test_serial.psm
    _L00201                  0E9   test_serial.psm
    _LC00207                 02E   test_serial.psm
    _LC00208                 03F   test_serial.psm
    _LC00209                 060   test_serial.psm
    _LC00210                 060   test_serial.psm
    _LC00211                 060   test_serial.psm
    _LC00212                 060   test_serial.psm
    _LC00213                 064   test_serial.psm
    _LC00214                 07B   test_serial.psm
    _LC00215                 07E   test_serial.psm
    _LC00216                 0C2   test_serial.psm
    _LC00217                 0D2   test_serial.psm
    _LC00218                 0DA   test_serial.psm
    _LC00219                 0E2   test_serial.psm
    _LC00220                 0E8   test_serial.psm
    _UART_setup              04C   test_serial.psm
    __sdcc_loop              00F   test_serial.psm
    __sdcc_program_startup   00E   test_serial.psm
 *  _delay                   022   test_serial.psm
    _delay_10us              029   test_serial.psm
    _delay_10us_fixed        025   test_serial.psm
    _delay_ms                03A   test_serial.psm
 *  _getchar                 060   test_serial.psm
    _intcon_disable_bit      019   test_serial.psm
    _intcon_enable_bit       013   test_serial.psm
    _interrupt_handler       0C7   test_serial.psm
    _main                    0B8   test_serial.psm
 *  _pbcc_disable_interrupt  022   test_serial.psm
    _pbcc_enable_interrupt   020   test_serial.psm
 *  _putchar                 060   test_serial.psm
    _update_intcon           010   test_serial.psm
    rpt11                    022   test_serial.psm
 *  rpt22                    026   test_serial.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          25
   ADDCY        -
   AND          5
   CALL         17
   COMPARE      13
   DISABLE      -
   ENABLE       1
   FETCH        27
   INPUT        2
   JUMP         32
   LOAD         49
   OR           1
   OUTPUT       5
   RETURN       12
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        36
   SUB          14
   SUBCY        -
   TEST         -
   XOR          1
