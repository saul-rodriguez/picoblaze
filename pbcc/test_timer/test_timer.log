Open PicoBlaze Assembler log for program "test_timer.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-10-06T23:11:41
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 73
  Memory locations available: 951
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 20
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Sun Oct  6 23:11:36 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _intcon, 00

000                                          ;	../common/bamse.h:42: volatile unsigned char intcon = 0;
000  00000                                   load s0, 00
001  2E000                                   store s0, _intcon
002  00F3F                                   load sf, 3f
003  34004            ╭⤙                     jump __sdcc_program_startup
004                   │                      ;--------------------------------------------------------
004                   │                      ; Home
004                   │                      ;--------------------------------------------------------
004                   │ __sdcc_program_startup:
004  30014          ╭─┴⤙                     call _main
005                 │                        ;	return from main will lock up
005                 │           __sdcc_loop:
005  34005          │ ╰▶                     jump __sdcc_loop
006                 │                        ;--------------------------------------------------------
006                 │                        ; code
006                 │                        ;--------------------------------------------------------
006                 │                        ;	../common/bamse.h:44: void update_intcon(void)
006                 │        _update_intcon:
006                 │                        ;	../common/bamse.h:46: PBLAZEPORT[INT_OUT_CONFIG] = intcon;
006                 │                        ;REMOVED: fetch s0, _intcon
006                 │                        ;REMOVED: output s0, 00
006                 │                        ;REMOVED: return
006                 │                        ;	../common/bamse.h:49: void intcon_enable_bit(unsigned char pos)
006                 │    _intcon_enable_bit:
006                 │                        ;REMOVED: load s0, sb
006                 │                        ;	../common/bamse.h:51: intcon |= pos;
006                 │                        ;REMOVED: fetch s1, _intcon
006                 │                        ;REMOVED: load s2, s1
006                 │                        ;REMOVED: or s2, s0
006                 │                        ;REMOVED: store s2, _intcon
006                 │                        ;REMOVED: return
006                 │                        ;	../common/bamse.h:55: void intcon_disable_bit(unsigned char pos)
006                 │   _intcon_disable_bit:
006                 │                        ;REMOVED: load s0, sb
006                 │                        ;	../common/bamse.h:57: intcon &= (~pos);
006                 │                        ;REMOVED: xor s0, ff
006                 │                        ;REMOVED: fetch s1, _intcon
006                 │                        ;REMOVED: load s2, s1
006                 │                        ;REMOVED: and s2, s0
006                 │                        ;REMOVED: store s2, _intcon
006                 │                        ;REMOVED: return
006                 │                        ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
006                 │   _pbcc_enable_interrupt:
006                 │                        ;	device/include/pblaze/intr.h:34: __endasm;
006                 │                        ;REMOVED: enable INTERRUPT
006                 │                        ;REMOVED: return
006                 │                        ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
006                 │   _pbcc_disable_interrupt:
006                 │                        ;	device/include/pblaze/intr.h:41: __endasm;
                    │                        ;
006                 │                        ;REMOVED: disable INTERRUPT
006                 │                        ;REMOVED: return
006                 │                        ;	../common/timer.h:17: void TIMER_setCounter(unsigned short count)
006                 │     _TIMER_setCounter:
006  010B0          │╭─▶                     load s0, sb
007  011C0          ││                       load s1, sc
008                 ││                       ;	../common/timer.h:21: aux = (unsigned char)(count);
008  01200          ││                       load s2, s0
009                 ││                       ;	../common/timer.h:22: PBLAZEPORT[TIMER_LREG] = aux;
009  2C20B          ││                       output s2, 0b
00A                 ││                       ;	../common/timer.h:24: aux = (unsigned char)(count >> 8);
00A  01310          ││                       load s3, s1
00B  00401          ││                       load s4, 01
00C                 ││                       ;	../common/timer.h:25: PBLAZEPORT[TIMER_HREG] = aux;
00C  2C30C          ││                       output s3, 0c
00D  2A000          ││                       return
00E                 ││                       ;	../common/timer.h:28: void TIMER_setConf(unsigned char conf)
00E                 ││       _TIMER_setConf:
00E  010B0         ╭──┬▶                     load s0, sb
00F                ││││                      ;	../common/timer.h:30: PBLAZEPORT[TIMER] = conf;
00F  2C00A         ││││                      output s0, 0a
010  2A000         ││││                      return
011                ││││                      ;	../common/timer.h:33: unsigned char TIMER_readConf()
011                ││││     _TIMER_readConf:
011                ││││                      ;	../common/timer.h:37: aux = PBLAZEPORT[TIMER];
011  0400A        ╭────▶                     input s0, 0a
012               │││││                      ;	../common/timer.h:38: return aux;
012  01B00        │││││                      load sb, s0
013  2A000        │││││                      return
014               │││││                      ;	test_timer.c:7: void main()
014               │││││               _main:
014               │││││                      ;	test_timer.c:11: flag = 0;
014  00000        ││╰──▶                     load s0, 00
015               ││ ││                      ;	test_timer.c:13: TIMER_setCounter(0xfff0);
015  2F0F0        ││ ││                      store s0, (sf)
016  1CF01        ││ ││                      sub sf, 01
017  00BF0        ││ ││                      load sb, f0
018  00CFF        ││ ││                      load sc, ff
019  30006        ││ ╰─⤙                     call _TIMER_setCounter
01A  18F01        ││  │                      add sf, 01
01B  070F0        ││  │                      fetch s0, (sf)
01C               ││  │                      ;	test_timer.c:16: TIMER_setConf(aux);
01C  2F0F0        ││  │                      store s0, (sf)
01D  1CF01        ││  │                      sub sf, 01
01E  00B06        ││  │                      load sb, 06
01F  3000E        ││  ╰⤙                     call _TIMER_setConf
020  18F01        ││                         add sf, 01
021  070F0        ││                         fetch s0, (sf)
022               ││                         ;	test_timer.c:20: while(1) {
022               ││                _L00124:
022               ││                         ;	test_timer.c:22: TIMER_setConf(aux);
022  2F0F0       ╭──┬──▶                     store s0, (sf)
023  1CF01       ││││                        sub sf, 01
024  00B06       ││││                        load sb, 06
025  3000E       ││╰───⤙                     call _TIMER_setConf
026  18F01       ││ │                        add sf, 01
027  070F0       ││ │                        fetch s0, (sf)
028              ││ │                        ;	test_timer.c:23: do {
028              ││ │               _L00117:
028              ││ │                        ;	test_timer.c:24: aux = TIMER_readConf() & 0x02;
028  2F0F0       ││ │╭─▶                     store s0, (sf)
029  1CF01       ││ ││                       sub sf, 01
02A  30011       │╰────⤙                     call _TIMER_readConf
02B  18F01       │  ││                       add sf, 01
02C  070F0       │  ││                       fetch s0, (sf)
02D  011B0       │  ││                       load s1, sb
02E  0A102       │  ││                       and s1, 02
02F              │  ││                       ;	test_timer.c:25: } while (aux);
02F  14100       │  ││                       compare s1, 00
030  35032       │  ││╭⤙                     jump Z, _LC00134
031  34028       │  │╰─⤙                     jump _L00117
032              │  │ │            _LC00134:
032              │  │ │                      ;	test_timer.c:27: if (flag) {
032  14000       │  │ ╰▶                     compare s0, 00
033  35435       │  │ ╭⤙                     jump NZ, _LC00135
034  34039       │  │╭─⤙                     jump _L00121
035              │  │││            _LC00135:
035              │  │││                      ;	test_timer.c:28: flag = 0;
035  00000       │  ││╰▶                     load s0, 00
036              │  ││                       ;	test_timer.c:29: PBLAZEPORT[PORTC_OUT] = 0x00;
036  00100       │  ││                       load s1, 00
037  2C105       │  ││                       output s1, 05
038  34022       │  ╰──⤙                     jump _L00124
039              │   │              _L00121:
039              │   │                       ;	test_timer.c:32: flag = 1;
039  00001       │   ╰─▶                     load s0, 01
03A              │                           ;	test_timer.c:33: PBLAZEPORT[PORTC_OUT] = 0xff;
03A  001FF       │                           load s1, ff
03B  2C105       │                           output s1, 05
03C  34022       ╰─────⤙                     jump _L00124
03D                                          ;	test_timer.c:39: void _interrupt_handler(void) __interrupt (1)
03D                      _interrupt_handler:
03D                                          ;	test_timer.c:43: flags = PBLAZEPORT[INT_IN_FLAGS];
03D  2F0F0            ╭▶                     store s0, (sf)
03E  1CF01            │                      sub sf, 01
03F  04000            │                      input s0, 00
040  2F1F0            │                      store s1, (sf)
041  1CF01            │                      sub sf, 01
042  01100            │                      load s1, s0
043  18F01            │                      add sf, 01
044  071F0            │                      fetch s1, (sf)
045  18F01            │                      add sf, 01
046  070F0            │                      fetch s0, (sf)
047  38001            │                      returni ENABLE
3FF                   │                      ;--------------------------------------------------------
3FF                   │                      ; interrupt vector
3FF                   │                      ;--------------------------------------------------------
3FF                   │                      address 3ff
3FF  3403D            ╰⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_timer/test_timer.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    _intcon            00     test_timer.psm
    datestamp_day      06
    datestamp_month    0A
    datestamp_year     13
    timestamp_hours    17
    timestamp_minutes  0B
    timestamp_seconds  29


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "06 Oct 2019"
    timestamp$       "23:11:41"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _L00117                  028   test_timer.psm
    _L00121                  039   test_timer.psm
    _L00124                  022   test_timer.psm
    _LC00134                 032   test_timer.psm
    _LC00135                 035   test_timer.psm
    _TIMER_readConf          011   test_timer.psm
    _TIMER_setConf           00E   test_timer.psm
    _TIMER_setCounter        006   test_timer.psm
    __sdcc_loop              005   test_timer.psm
    __sdcc_program_startup   004   test_timer.psm
 *  _intcon_disable_bit      006   test_timer.psm
 *  _intcon_enable_bit       006   test_timer.psm
    _interrupt_handler       03D   test_timer.psm
    _main                    014   test_timer.psm
 *  _pbcc_disable_interrupt  006   test_timer.psm
 *  _pbcc_enable_interrupt   006   test_timer.psm
 *  _update_intcon           006   test_timer.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          6
   ADDCY        -
   AND          1
   CALL         5
   COMPARE      2
   DISABLE      -
   ENABLE       -
   FETCH        6
   INPUT        2
   JUMP         9
   LOAD         20
   OR           -
   OUTPUT       5
   RETURN       3
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        7
   SUB          6
   SUBCY        -
   TEST         -
   XOR          -
