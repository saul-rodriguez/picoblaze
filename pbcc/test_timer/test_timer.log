Open PicoBlaze Assembler log for program "test_timer.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-10-07T21:54:46
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 93
  Memory locations available: 931
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 9
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Mon Oct  7 21:54:33 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _intcon, 00
000                                          constant _tmr_flag, 01

000                                          ;	../common/bamse.h:42: volatile unsigned char intcon = 0;
000  00000                                   load s0, 00
001  2E000                                   store s0, _intcon
002  00F3F                                   load sf, 3f
003  34004            ╭⤙                     jump __sdcc_program_startup
004                   │                      ;--------------------------------------------------------
004                   │                      ; Home
004                   │                      ;--------------------------------------------------------
004                   │ __sdcc_program_startup:
004  3001C         ╭──┴⤙                     call _main
005                │                         ;	return from main will lock up
005                │            __sdcc_loop:
005  34005         │  ╰▶                     jump __sdcc_loop
006                │                         ;--------------------------------------------------------
006                │                         ; code
006                │                         ;--------------------------------------------------------
006                │                         ;	../common/bamse.h:49: void intcon_enable_bits(unsigned char pos)
006                │    _intcon_enable_bits:
006  010B0       ╭─────▶                     load s0, sb
007              │ │                         ;	../common/bamse.h:52: aux = intcon;
007  06100       │ │                         fetch s1, _intcon
008              │ │                         ;	../common/bamse.h:54: aux |= pos;
008  0D010       │ │                         or s0, s1
009              │ │                         ;	../common/bamse.h:55: PBLAZEPORT[INT_OUT_CONFIG] = aux;
009  2C000       │ │                         output s0, 00
00A              │ │                         ;	../common/bamse.h:57: intcon = aux;
00A  2E000       │ │                         store s0, _intcon
00B  2A000       │ │                         return
00C              │ │                         ;	../common/bamse.h:60: void intcon_disable_bits(unsigned char pos)
00C              │ │    _intcon_disable_bits:
00C              │ │                         ;REMOVED: load s0, sb
00C              │ │                         ;	../common/bamse.h:64: aux = intcon;
00C              │ │                         ;REMOVED: fetch s1, _intcon
00C              │ │                         ;	../common/bamse.h:66: aux &= (~pos);
00C              │ │                         ;REMOVED: xor s0, ff
00C              │ │                         ;REMOVED: and s0, s1
00C              │ │                         ;	../common/bamse.h:67: PBLAZEPORT[INT_OUT_CONFIG] = aux;
00C              │ │                         ;REMOVED: output s0, 00
00C              │ │                         ;	../common/bamse.h:69: intcon = aux;
00C              │ │                         ;REMOVED: store s0, _intcon
00C              │ │                         ;REMOVED: return
00C              │ │                         ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
00C              │ │    _pbcc_enable_interrupt:
00C              │ │                         ;	device/include/pblaze/intr.h:34: __endasm;
00C  3C001       │ │╭──▶                     enable INTERRUPT
00D  2A000       │ ││                        return
00E              │ ││                        ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
00E              │ ││   _pbcc_disable_interrupt:
00E              │ ││                        ;	device/include/pblaze/intr.h:41: __endasm;
                 │ ││                        ;
00E              │ ││                        ;REMOVED: disable INTERRUPT
00E              │ ││                        ;REMOVED: return
00E              │ ││                        ;	../common/timer.h:17: void TIMER_setCounter(unsigned short count)
00E              │ ││     _TIMER_setCounter:
00E  010B0       │ ││╭─▶                     load s0, sb
00F  011C0       │ │││                       load s1, sc
010              │ │││                       ;	../common/timer.h:21: aux = (unsigned char)(count);
010  01200       │ │││                       load s2, s0
011              │ │││                       ;	../common/timer.h:22: PBLAZEPORT[TIMER_LREG] = aux;
011  2C20B       │ │││                       output s2, 0b
012              │ │││                       ;	../common/timer.h:24: aux = (unsigned char)(count >> 8);
012  01310       │ │││                       load s3, s1
013  00401       │ │││                       load s4, 01
014              │ │││                       ;	../common/timer.h:25: PBLAZEPORT[TIMER_HREG] = aux;
014  2C30C       │ │││                       output s3, 0c
015  2A000       │ │││                       return
016              │ │││                       ;	../common/timer.h:28: void TIMER_setConf(unsigned char conf)
016              │ │││       _TIMER_setConf:
016  010B0      ╭─────┬▶                     load s0, sb
017             ││ ││││                      ;	../common/timer.h:30: PBLAZEPORT[TIMER] = conf;
017  2C00A      ││ ││││                      output s0, 0a
018  2A000      ││ ││││                      return
019             ││ ││││                      ;	../common/timer.h:33: unsigned char TIMER_readConf()
019             ││ ││││     _TIMER_readConf:
019             ││ ││││                      ;	../common/timer.h:37: aux = PBLAZEPORT[TIMER];
019  0400A      ││╭────▶                     input s0, 0a
01A             │││││││                      ;	../common/timer.h:38: return aux;
01A  01B00      │││││││                      load sb, s0
01B  2A000      │││││││                      return
01C             │││││││                      ;	test_timer.c:9: void main()
01C             │││││││               _main:
01C             │││││││                      ;	test_timer.c:13: tmr_flag = 0;
01C  00000      │││╰───▶                     load s0, 00
01D  2E001      │││ │││                      store s0, _tmr_flag
01E             │││ │││                      ;	test_timer.c:15: TIMER_setCounter(0x0000);
01E  00B00      │││ │││                      load sb, 00
01F  00C00      │││ │││                      load sc, 00
020  3000E      │││ │╰─⤙                     call _TIMER_setCounter
021             │││ │ │                      ;	test_timer.c:18: TIMER_setConf(aux);
021  00B7E      │││ │ │                      load sb, 7e
022  30016      │││ │ ╰⤙                     call _TIMER_setConf
023             │││ │                        ;	test_timer.c:22: intcon_enable_bits(aux);
023  00B20      │││ │                        load sb, 20
024  30006      │╰─────⤙                     call _intcon_enable_bits
025             │ │ │                        ;	test_timer.c:24: pbcc_enable_interrupt();
025  3000C      │ │ ╰──⤙                     call _pbcc_enable_interrupt
026             │ │                          ;	test_timer.c:26: flip = 0;
026  00000      │ │                          load s0, 00
027             │ │                          ;	test_timer.c:27: while(1) {
027             │ │                 _L00121:
027             │ │                          ;	test_timer.c:35: if (tmr_flag) {
027  06101      │ │╭┬─┬▶                     fetch s1, _tmr_flag
028  14100      │ │││ │                      compare s1, 00
029  3542B      │ │││╭─⤙                     jump NZ, _LC00133
02A  34027      │ ││││╰⤙                     jump _L00121
02B             │ ││││             _LC00133:
02B             │ ││││                       ;	test_timer.c:36: tmr_flag = 0;
02B  00200      │ │││╰─▶                     load s2, 00
02C  2E201      │ │││                        store s2, _tmr_flag
02D             │ │││                        ;	test_timer.c:38: if (flip) {
02D  14000      │ │││                        compare s0, 00
02E  35430      │ │││ ╭⤙                     jump NZ, _LC00134
02F  34034      │ │││╭─⤙                     jump _L00116
030             │ │││││            _LC00134:
030             │ │││││                      ;	test_timer.c:39: flip = 0;
030  00000      │ ││││╰▶                     load s0, 00
031             │ ││││                       ;	test_timer.c:40: PBLAZEPORT[PORTC_OUT] = 0x00;
031  00200      │ ││││                       load s2, 00
032  2C205      │ ││││                       output s2, 05
033  34027      │ ││╰──⤙                     jump _L00121
034             │ ││ │              _L00116:
034             │ ││ │                       ;	test_timer.c:42: flip = 1;
034  00001      │ ││ ╰─▶                     load s0, 01
035             │ ││                         ;	test_timer.c:43: PBLAZEPORT[PORTC_OUT] = 0xff;
035  002FF      │ ││                         load s2, ff
036  2C205      │ ││                         output s2, 05
037  34027      │ │╰───⤙                     jump _L00121
038             │ │                          ;	test_timer.c:50: void _interrupt_handler(void) __interrupt (1)
038             │ │      _interrupt_handler:
038             │ │                          ;	test_timer.c:54: flags = PBLAZEPORT[INT_IN_FLAGS];
038  2F0F0      │ │ ╭──▶                     store s0, (sf)
039  1CF01      │ │ │                        sub sf, 01
03A  04000      │ │ │                        input s0, 00
03B  2F1F0      │ │ │                        store s1, (sf)
03C  1CF01      │ │ │                        sub sf, 01
03D  01100      │ │ │                        load s1, s0
03E             │ │ │                        ;	test_timer.c:56: if (flags & TIMER_INT_FLAG_BIT) {
03E  01010      │ │ │                        load s0, s1
03F  0A020      │ │ │                        and s0, 20
040  14000      │ │ │                        compare s0, 00
041  35443      │ │ │ ╭⤙                     jump NZ, _LC00135
042  34053      │ │ │╭─⤙                     jump _L00130
043             │ │ │││            _LC00135:
043             │ │ │││                      ;	test_timer.c:57: aux = TIMER_readConf();
043  30019      │ ╰───┴⤙                     call _TIMER_readConf
044  010B0      │   ││                       load s0, sb
045  2F2F0      │   ││                       store s2, (sf)
046  1CF01      │   ││                       sub sf, 01
047  01200      │   ││                       load s2, s0
048             │   ││                       ;	test_timer.c:58: aux &= 0b11111110; // Clear interrupt flag
048  01020      │   ││                       load s0, s2
049  2F3F0      │   ││                       store s3, (sf)
04A  1CF01      │   ││                       sub sf, 01
04B  01300      │   ││                       load s3, s0
04C  0A3FE      │   ││                       and s3, fe
04D  01230      │   ││                       load s2, s3
04E             │   ││                       ;	test_timer.c:60: TIMER_setConf(aux);
04E  01020      │   ││                       load s0, s2
04F  01B00      │   ││                       load sb, s0
050  30016      ╰──────⤙                     call _TIMER_setConf
051                 ││                       ;	test_timer.c:61: tmr_flag = 1;
051  00001          ││                       load s0, 01
052  2E001          ││                       store s0, _tmr_flag
053                 ││              _L00130:
053  18F01          │╰─▶                     add sf, 01
054  073F0          │                        fetch s3, (sf)
055  18F01          │                        add sf, 01
056  072F0          │                        fetch s2, (sf)
057  18F01          │                        add sf, 01
058  071F0          │                        fetch s1, (sf)
059  18F01          │                        add sf, 01
05A  070F0          │                        fetch s0, (sf)
05B  38001          │                        returni ENABLE
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        ; interrupt vector
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        address 3ff
3FF  34038          ╰──⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_timer/test_timer.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    _intcon            00     test_timer.psm
    _tmr_flag          01     test_timer.psm
    datestamp_day      07
    datestamp_month    0A
    datestamp_year     13
    timestamp_hours    15
    timestamp_minutes  36
    timestamp_seconds  2E


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "07 Oct 2019"
    timestamp$       "21:54:46"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _L00116                  034   test_timer.psm
    _L00121                  027   test_timer.psm
    _L00130                  053   test_timer.psm
    _LC00133                 02B   test_timer.psm
    _LC00134                 030   test_timer.psm
    _LC00135                 043   test_timer.psm
    _TIMER_readConf          019   test_timer.psm
    _TIMER_setConf           016   test_timer.psm
    _TIMER_setCounter        00E   test_timer.psm
    __sdcc_loop              005   test_timer.psm
    __sdcc_program_startup   004   test_timer.psm
 *  _intcon_disable_bits     00C   test_timer.psm
    _intcon_enable_bits      006   test_timer.psm
    _interrupt_handler       038   test_timer.psm
    _main                    01C   test_timer.psm
 *  _pbcc_disable_interrupt  00E   test_timer.psm
    _pbcc_enable_interrupt   00C   test_timer.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          4
   ADDCY        -
   AND          2
   CALL         7
   COMPARE      3
   DISABLE      -
   ENABLE       1
   FETCH        6
   INPUT        2
   JUMP         11
   LOAD         31
   OR           1
   OUTPUT       6
   RETURN       5
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        9
   SUB          4
   SUBCY        -
   TEST         -
   XOR          -
