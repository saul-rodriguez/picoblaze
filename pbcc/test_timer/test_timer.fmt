                      ;--------------------------------------------------------
                      ; File Created by SDCC : free open source ANSI-C Compiler
                      ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
                      ; This file was generated Mon Oct  7 21:54:33 2019
                      ;--------------------------------------------------------
                      ;--------------------------------------------------------
                      ; global & static initialisations
                      ;--------------------------------------------------------
                      constant _intcon, 00
                      constant _tmr_flag, 01

                      ;	../common/bamse.h:42: volatile unsigned char intcon = 0;
                      load s0, 00
                      store s0, _intcon
                      load sf, 3f
                      jump __sdcc_program_startup
                      ;--------------------------------------------------------
                      ; Home
                      ;--------------------------------------------------------
 __sdcc_program_startup:
                      call _main
                      ;	return from main will lock up
         __sdcc_loop:
                      jump __sdcc_loop
                      ;--------------------------------------------------------
                      ; code
                      ;--------------------------------------------------------
                      ;	../common/bamse.h:49: void intcon_enable_bits(unsigned char pos)
 _intcon_enable_bits:
                      load s0, sb
                      ;	../common/bamse.h:52: aux = intcon;
                      fetch s1, _intcon
                      ;	../common/bamse.h:54: aux |= pos;
                      or s0, s1
                      ;	../common/bamse.h:55: PBLAZEPORT[INT_OUT_CONFIG] = aux;
                      output s0, 00
                      ;	../common/bamse.h:57: intcon = aux;
                      store s0, _intcon
                      return
                      ;	../common/bamse.h:60: void intcon_disable_bits(unsigned char pos)
 _intcon_disable_bits:
                      ;REMOVED: load s0, sb
                      ;	../common/bamse.h:64: aux = intcon;
                      ;REMOVED: fetch s1, _intcon
                      ;	../common/bamse.h:66: aux &= (~pos);
                      ;REMOVED: xor s0, ff
                      ;REMOVED: and s0, s1
                      ;	../common/bamse.h:67: PBLAZEPORT[INT_OUT_CONFIG] = aux;
                      ;REMOVED: output s0, 00
                      ;	../common/bamse.h:69: intcon = aux;
                      ;REMOVED: store s0, _intcon
                      ;REMOVED: return
                      ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
 _pbcc_enable_interrupt:
                      ;	device/include/pblaze/intr.h:34: __endasm;
                      enable INTERRUPT
                      return
                      ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
 _pbcc_disable_interrupt:
                      ;	device/include/pblaze/intr.h:41: __endasm;
                      ;
                      ;REMOVED: disable INTERRUPT
                      ;REMOVED: return
                      ;	../common/timer.h:17: void TIMER_setCounter(unsigned short count)
   _TIMER_setCounter:
                      load s0, sb
                      load s1, sc
                      ;	../common/timer.h:21: aux = (unsigned char)(count);
                      load s2, s0
                      ;	../common/timer.h:22: PBLAZEPORT[TIMER_LREG] = aux;
                      output s2, 0b
                      ;	../common/timer.h:24: aux = (unsigned char)(count >> 8);
                      load s3, s1
                      load s4, 01
                      ;	../common/timer.h:25: PBLAZEPORT[TIMER_HREG] = aux;
                      output s3, 0c
                      return
                      ;	../common/timer.h:28: void TIMER_setConf(unsigned char conf)
      _TIMER_setConf:
                      load s0, sb
                      ;	../common/timer.h:30: PBLAZEPORT[TIMER] = conf;
                      output s0, 0a
                      return
                      ;	../common/timer.h:33: unsigned char TIMER_readConf()
     _TIMER_readConf:
                      ;	../common/timer.h:37: aux = PBLAZEPORT[TIMER];
                      input s0, 0a
                      ;	../common/timer.h:38: return aux;
                      load sb, s0
                      return
                      ;	test_timer.c:9: void main()
               _main:
                      ;	test_timer.c:13: tmr_flag = 0;
                      load s0, 00
                      store s0, _tmr_flag
                      ;	test_timer.c:15: TIMER_setCounter(0x0000);
                      load sb, 00
                      load sc, 00
                      call _TIMER_setCounter
                      ;	test_timer.c:18: TIMER_setConf(aux);
                      load sb, 7e
                      call _TIMER_setConf
                      ;	test_timer.c:22: intcon_enable_bits(aux);
                      load sb, 20
                      call _intcon_enable_bits
                      ;	test_timer.c:24: pbcc_enable_interrupt();
                      call _pbcc_enable_interrupt
                      ;	test_timer.c:26: flip = 0;
                      load s0, 00
                      ;	test_timer.c:27: while(1) {
             _L00121:
                      ;	test_timer.c:35: if (tmr_flag) {
                      fetch s1, _tmr_flag
                      compare s1, 00
                      jump NZ, _LC00133
                      jump _L00121
            _LC00133:
                      ;	test_timer.c:36: tmr_flag = 0;
                      load s2, 00
                      store s2, _tmr_flag
                      ;	test_timer.c:38: if (flip) {
                      compare s0, 00
                      jump NZ, _LC00134
                      jump _L00116
            _LC00134:
                      ;	test_timer.c:39: flip = 0;
                      load s0, 00
                      ;	test_timer.c:40: PBLAZEPORT[PORTC_OUT] = 0x00;
                      load s2, 00
                      output s2, 05
                      jump _L00121
             _L00116:
                      ;	test_timer.c:42: flip = 1;
                      load s0, 01
                      ;	test_timer.c:43: PBLAZEPORT[PORTC_OUT] = 0xff;
                      load s2, ff
                      output s2, 05
                      jump _L00121
                      ;	test_timer.c:50: void _interrupt_handler(void) __interrupt (1)
  _interrupt_handler:
                      ;	test_timer.c:54: flags = PBLAZEPORT[INT_IN_FLAGS];
                      store s0, (sf)
                      sub sf, 01
                      input s0, 00
                      store s1, (sf)
                      sub sf, 01
                      load s1, s0
                      ;	test_timer.c:56: if (flags & TIMER_INT_FLAG_BIT) {
                      load s0, s1
                      and s0, 20
                      compare s0, 00
                      jump NZ, _LC00135
                      jump _L00130
            _LC00135:
                      ;	test_timer.c:57: aux = TIMER_readConf();
                      call _TIMER_readConf
                      load s0, sb
                      store s2, (sf)
                      sub sf, 01
                      load s2, s0
                      ;	test_timer.c:58: aux &= 0b11111110; // Clear interrupt flag
                      load s0, s2
                      store s3, (sf)
                      sub sf, 01
                      load s3, s0
                      and s3, fe
                      load s2, s3
                      ;	test_timer.c:60: TIMER_setConf(aux);
                      load s0, s2
                      load sb, s0
                      call _TIMER_setConf
                      ;	test_timer.c:61: tmr_flag = 1;
                      load s0, 01
                      store s0, _tmr_flag
             _L00130:
                      add sf, 01
                      fetch s3, (sf)
                      add sf, 01
                      fetch s2, (sf)
                      add sf, 01
                      fetch s1, (sf)
                      add sf, 01
                      fetch s0, (sf)
                      returni ENABLE
                      ;--------------------------------------------------------
                      ; interrupt vector
                      ;--------------------------------------------------------
                      address 3ff
                      jump _interrupt_handler
