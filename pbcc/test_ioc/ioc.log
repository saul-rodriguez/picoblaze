Open PicoBlaze Assembler log for program "ioc.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-23T21:58:14
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 62
  Memory locations available: 962
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 2
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Mon Sep 23 21:57:58 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _porta, 00
000                                          constant _IOC_state, 01

000  00F3F                                   load sf, 3f
001  34002            ╭⤙                     jump __sdcc_program_startup
002                   │                      ;--------------------------------------------------------
002                   │                      ; Home
002                   │                      ;--------------------------------------------------------
002                   │ __sdcc_program_startup:
002  30006           ╭┴⤙                     call _main
003                  │                       ;	return from main will lock up
003                  │          __sdcc_loop:
003  34003           │╰▶                     jump __sdcc_loop
004                  │                       ;--------------------------------------------------------
004                  │                       ; code
004                  │                       ;--------------------------------------------------------
004                  │                       ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
004                  │  _pbcc_enable_interrupt:
004                  │                       ;	device/include/pblaze/intr.h:34: __endasm;
004  3C001           │╭▶                     enable INTERRUPT
005  2A000           ││                      return
006                  ││                      ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
006                  ││ _pbcc_disable_interrupt:
006                  ││                      ;	device/include/pblaze/intr.h:41: __endasm;
                     ││                      ;
006                  ││                      ;REMOVED: disable INTERRUPT
006                  ││                      ;REMOVED: return
006                  ││                      ;	ioc.c:25: void main()
006                  ││               _main:
006                  ││                      ;	ioc.c:29: PBLAZEPORT[PORTA_IOC_POS_CONF] = 0b00000101;
006  00005           ╰─▶                     load s0, 05
007  2C002            │                      output s0, 02
008                   │                      ;	ioc.c:30: PBLAZEPORT[PORTA_IOC_NEG_CONF] = 0b00000011;
008  00003            │                      load s0, 03
009  2C003            │                      output s0, 03
00A                   │                      ;	ioc.c:33: PBLAZEPORT[INT_OUT_CONFIG] = 0b00000111;
00A  00007            │                      load s0, 07
00B  2C000            │                      output s0, 00
00C                   │                      ;	ioc.c:35: porta = PBLAZEPORT[PORTA_IN];
00C  04001            │                      input s0, 01
00D  2E000            │                      store s0, _porta
00E                   │                      ;	ioc.c:36: IOC_state = 0;
00E  00000            │                      load s0, 00
00F  2E001            │                      store s0, _IOC_state
010                   │                      ;	ioc.c:38: pbcc_enable_interrupt();
010  30004            ╰⤙                     call _pbcc_enable_interrupt
011                                          ;	ioc.c:40: while(1) {
011                                 _L00108:
011                                          ;	ioc.c:41: if(IOC_state != IOC_IDLE) {
011  06001          ╭─┬▶                     fetch s0, _IOC_state
012  14000          │ │                      compare s0, 00
013  35415          │╭─⤙                     jump NZ, _LC00132
014  34011          ││╰⤙                     jump _L00108
015                 ││             _LC00132:
015                 ││                       ;	ioc.c:42: IOC_handler(IOC_state);
015  06001          │╰─▶                     fetch s0, _IOC_state
016  01B00          │                        load sb, s0
017  30024         ╭───⤙                     call _IOC_handler
018                ││                        ;	ioc.c:43: IOC_state = IOC_IDLE;;
018  00100         ││                        load s1, 00
019  2E101         ││                        store s1, _IOC_state
01A  34011         │╰──⤙                     jump _L00108
01B                │                         ;	ioc.c:48: void _interrupt_handler(void) __interrupt (1)
01B                │     _interrupt_handler:
01B                │                         ;	ioc.c:50: IOC_isr();
01B  3001D         │╭─┬▶                     call _IOC_isr
01C  38001         ││ │                      returni ENABLE
01D                ││ │                      ;	ioc.c:53: void IOC_isr()
01D                ││ │            _IOC_isr:
01D                ││ │                      ;	ioc.c:63: ioc_flags = PBLAZEPORT[INT_IN_FLAGS];
01D  04000         ││ ╰▶                     input s0, 00
01E                ││                        ;	ioc.c:64: if (ioc_flags) {
01E  14000         ││                        compare s0, 00
01F  35421         ││ ╭⤙                     jump NZ, _LC00133
020  34023         ││╭─⤙                     jump _L00118
021                ││││            _LC00133:
021                ││││                      ;	ioc.c:65: IOC_state = ioc_flags;
021  2E001         │││╰▶                     store s0, _IOC_state
022                │││                       ;	ioc.c:66: aux = PBLAZEPORT[PORTA_IN]; //Reset IOC flags
022  04001         │││                       input s0, 01
023                │││              _L00118:
023  2A000         ││╰─▶                     return
024                ││                        ;	ioc.c:71: void IOC_handler(unsigned char state)
024                ││          _IOC_handler:
024  010B0         ╰───▶                     load s0, sb
025                 │                        ;	ioc.c:75: aux = state & IOC_BIT0;
025  01100          │                        load s1, s0
026  0A101          │                        and s1, 01
027                 │                        ;	ioc.c:76: if (aux) {
027  14100          │                        compare s1, 00
028  3542A          │ ╭⤙                     jump NZ, _LC00134
029  3402C          │╭─⤙                     jump _L00122
02A                 │││            _LC00134:
02A                 │││                      ;	ioc.c:77: PBLAZEPORT[PORTC_OUT] = 0x0f;
02A  0020F          ││╰▶                     load s2, 0f
02B  2C205          ││                       output s2, 05
02C                 ││              _L00122:
02C                 ││                       ;	ioc.c:79: aux = state & IOC_BIT1;
02C  01200          │╰─▶                     load s2, s0
02D  0A202          │                        and s2, 02
02E  01120          │                        load s1, s2
02F                 │                        ;	ioc.c:80: if (aux) {
02F  14100          │                        compare s1, 00
030  35432          │ ╭⤙                     jump NZ, _LC00135
031  34034          │╭─⤙                     jump _L00124
032                 │││            _LC00135:
032                 │││                      ;	ioc.c:81: PBLAZEPORT[PORTC_OUT] = 0x3c;
032  0023C          ││╰▶                     load s2, 3c
033  2C205          ││                       output s2, 05
034                 ││              _L00124:
034                 ││                       ;	ioc.c:83: aux = state & IOC_BIT2;
034  01200          │╰─▶                     load s2, s0
035  0A204          │                        and s2, 04
036  01120          │                        load s1, s2
037                 │                        ;	ioc.c:84: if (aux) {
037  14100          │                        compare s1, 00
038  3543A          │ ╭⤙                     jump NZ, _LC00136
039  3403C          │╭─⤙                     jump _L00127
03A                 │││            _LC00136:
03A                 │││                      ;	ioc.c:85: PBLAZEPORT[PORTC_OUT] = 0xf0;
03A  000F0          ││╰▶                     load s0, f0
03B  2C005          ││                       output s0, 05
03C                 ││              _L00127:
03C  2A000          │╰─▶                     return
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        ; interrupt vector
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        address 3ff
3FF  3401B          ╰──⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_ioc/ioc.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    _IOC_state         01     ioc.psm
    _porta             00     ioc.psm
    datestamp_day      17
    datestamp_month    09
    datestamp_year     13
    timestamp_hours    15
    timestamp_minutes  3A
    timestamp_seconds  0E


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "23 Sep 2019"
    timestamp$       "21:58:14"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _IOC_handler             024   ioc.psm
    _IOC_isr                 01D   ioc.psm
    _L00108                  011   ioc.psm
    _L00118                  023   ioc.psm
    _L00122                  02C   ioc.psm
    _L00124                  034   ioc.psm
    _L00127                  03C   ioc.psm
    _LC00132                 015   ioc.psm
    _LC00133                 021   ioc.psm
    _LC00134                 02A   ioc.psm
    _LC00135                 032   ioc.psm
    _LC00136                 03A   ioc.psm
    __sdcc_loop              003   ioc.psm
    __sdcc_program_startup   002   ioc.psm
    _interrupt_handler       01B   ioc.psm
    _main                    006   ioc.psm
 *  _pbcc_disable_interrupt  006   ioc.psm
    _pbcc_enable_interrupt   004   ioc.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          -
   ADDCY        -
   AND          3
   CALL         4
   COMPARE      5
   DISABLE      -
   ENABLE       1
   FETCH        2
   INPUT        3
   JUMP         14
   LOAD         16
   OR           -
   OUTPUT       6
   RETURN       3
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        4
   SUB          -
   SUBCY        -
   TEST         -
   XOR          -
