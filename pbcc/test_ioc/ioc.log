Open PicoBlaze Assembler log for program "ioc.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-20T23:48:25
  Target architecture: PicoBlaze-3

  Last occupied address: 3FF hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 63
  Memory locations available: 961
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 2
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Fri Sep 20 23:48:15 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _porta, 00
000                                          constant _IOC_state, 01

000  00F3F                                   load sf, 3f
001  34002            ╭⤙                     jump __sdcc_program_startup
002                   │                      ;--------------------------------------------------------
002                   │                      ; Home
002                   │                      ;--------------------------------------------------------
002                   │ __sdcc_program_startup:
002  30006           ╭┴⤙                     call _main
003                  │                       ;	return from main will lock up
003                  │          __sdcc_loop:
003  34003           │╰▶                     jump __sdcc_loop
004                  │                       ;--------------------------------------------------------
004                  │                       ; code
004                  │                       ;--------------------------------------------------------
004                  │                       ;	device/include/pblaze/intr.h:30: void pbcc_enable_interrupt(void)
004                  │  _pbcc_enable_interrupt:
004                  │                       ;	device/include/pblaze/intr.h:34: __endasm;
004  3C001           │╭▶                     enable INTERRUPT
005  2A000           ││                      return
006                  ││                      ;	device/include/pblaze/intr.h:37: void pbcc_disable_interrupt(void)
006                  ││ _pbcc_disable_interrupt:
006                  ││                      ;	device/include/pblaze/intr.h:41: __endasm;
                     ││                      ;
006                  ││                      ;REMOVED: disable INTERRUPT
006                  ││                      ;REMOVED: return
006                  ││                      ;	ioc.c:25: void main()
006                  ││               _main:
006                  ││                      ;	ioc.c:29: PBLAZEPORT[PORTA_IOC_POS_CONF] = 0b00000101;
006  00005           ╰─▶                     load s0, 05
007  2C002            │                      output s0, 02
008                   │                      ;	ioc.c:30: PBLAZEPORT[PORTA_IOC_NEG_CONF] = 0b00000011;
008  00003            │                      load s0, 03
009  2C003            │                      output s0, 03
00A                   │                      ;	ioc.c:32: porta = PBLAZEPORT[PORTA_IN];
00A  04001            │                      input s0, 01
00B  2E000            │                      store s0, _porta
00C                   │                      ;	ioc.c:33: IOC_state = 0;
00C  00000            │                      load s0, 00
00D  2E001            │                      store s0, _IOC_state
00E                   │                      ;	ioc.c:35: pbcc_enable_interrupt();
00E  30004            ╰⤙                     call _pbcc_enable_interrupt
00F                                          ;	ioc.c:37: while(1) {
00F                                 _L00108:
00F                                          ;	ioc.c:38: if(IOC_state != IOC_IDLE) {
00F  06001          ╭─┬▶                     fetch s0, _IOC_state
010  14000          │ │                      compare s0, 00
011  35413          │╭─⤙                     jump NZ, _LC00129
012  3400F          ││╰⤙                     jump _L00108
013                 ││             _LC00129:
013                 ││                       ;	ioc.c:39: IOC_handler(IOC_state);
013  06001          │╰─▶                     fetch s0, _IOC_state
014  01B00          │                        load sb, s0
015  30022          │╭─⤙                     call _IOC_handler
016                 ││                       ;	ioc.c:40: IOC_state = IOC_IDLE;;
016  00100          ││                       load s1, 00
017  2E101          ││                       store s1, _IOC_state
018  3400F          ╰──⤙                     jump _L00108
019                  │                       ;	ioc.c:45: void _interrupt_handler(void) __interrupt (1)
019                  │   _interrupt_handler:
019                  │                       ;	ioc.c:47: IOC_isr();
019  3001B          ╭─┬▶                     call _IOC_isr
01A  38001          │││                      returni ENABLE
01B                 │││                      ;	ioc.c:50: void IOC_isr()
01B                 │││            _IOC_isr:
01B                 │││                      ;	ioc.c:53: porta_new = PBLAZEPORT[PORTA_IN];
01B  04001          ││╰▶                     input s0, 01
01C                 ││                       ;	ioc.c:54: IOC_state = porta ^ porta_new;
01C  06100          ││                       fetch s1, _porta
01D  01210          ││                       load s2, s1
01E  0F200          ││                       xor s2, s0
01F  2E201          ││                       store s2, _IOC_state
020                 ││                       ;	ioc.c:55: porta = porta_new;
020  2E000          ││                       store s0, _porta
021  2A000          ││                       return
022                 ││                       ;	ioc.c:58: void IOC_handler(unsigned char porta_state)
022                 ││         _IOC_handler:
022  010B0          │╰─▶                     load s0, sb
023                 │                        ;	ioc.c:61: PBLAZEPORT[PORTC_OUT] = porta_state;
023  2C005          │                        output s0, 05
024                 │                        ;	ioc.c:63: aux = porta_state & IOC_BIT0;
024  01100          │                        load s1, s0
025  0A101          │                        and s1, 01
026                 │                        ;	ioc.c:64: if (aux) {
026  14100          │                        compare s1, 00
027  35429          │ ╭⤙                     jump NZ, _LC00130
028  3402B          │╭─⤙                     jump _L00119
029                 │││            _LC00130:
029                 │││                      ;	ioc.c:65: PBLAZEPORT[PORTC_OUT] = 0x0f;
029  0020F          ││╰▶                     load s2, 0f
02A  2C205          ││                       output s2, 05
02B                 ││              _L00119:
02B                 ││                       ;	ioc.c:67: aux = porta_state & IOC_BIT1;
02B  01200          │╰─▶                     load s2, s0
02C  0A202          │                        and s2, 02
02D  01120          │                        load s1, s2
02E                 │                        ;	ioc.c:68: if (aux) {
02E  14100          │                        compare s1, 00
02F  35431          │ ╭⤙                     jump NZ, _LC00131
030  34033          │╭─⤙                     jump _L00121
031                 │││            _LC00131:
031                 │││                      ;	ioc.c:69: PBLAZEPORT[PORTC_OUT] = 0x3c;
031  0023C          ││╰▶                     load s2, 3c
032  2C205          ││                       output s2, 05
033                 ││              _L00121:
033                 ││                       ;	ioc.c:71: aux = porta_state & IOC_BIT2;
033  01200          │╰─▶                     load s2, s0
034  0A204          │                        and s2, 04
035  01120          │                        load s1, s2
036                 │                        ;	ioc.c:72: if (aux) {
036  14100          │                        compare s1, 00
037  35439          │ ╭⤙                     jump NZ, _LC00132
038  3403B          │╭─⤙                     jump _L00123
039                 │││            _LC00132:
039                 │││                      ;	ioc.c:73: PBLAZEPORT[PORTC_OUT] = 0xf0;
039  000F0          ││╰▶                     load s0, f0
03A  2C005          ││                       output s0, 05
03B                 ││              _L00123:
03B                 ││                       ;	ioc.c:76: IOC_state = 0;
03B  00000          │╰─▶                     load s0, 00
03C  2E001          │                        store s0, _IOC_state
03D  2A000          │                        return
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        ; interrupt vector
3FF                 │                        ;--------------------------------------------------------
3FF                 │                        address 3ff
3FF  34019          ╰──⤙                     jump _interrupt_handler

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test_ioc/ioc.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    _IOC_state         01     ioc.psm
    _porta             00     ioc.psm
    datestamp_day      14
    datestamp_month    09
    datestamp_year     13
    timestamp_hours    17
    timestamp_minutes  30
    timestamp_seconds  19


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "20 Sep 2019"
    timestamp$       "23:48:25"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
    _IOC_handler             022   ioc.psm
    _IOC_isr                 01B   ioc.psm
    _L00108                  00F   ioc.psm
    _L00119                  02B   ioc.psm
    _L00121                  033   ioc.psm
    _L00123                  03B   ioc.psm
    _LC00129                 013   ioc.psm
    _LC00130                 029   ioc.psm
    _LC00131                 031   ioc.psm
    _LC00132                 039   ioc.psm
    __sdcc_loop              003   ioc.psm
    __sdcc_program_startup   002   ioc.psm
    _interrupt_handler       019   ioc.psm
    _main                    006   ioc.psm
 *  _pbcc_disable_interrupt  006   ioc.psm
    _pbcc_enable_interrupt   004   ioc.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          -
   ADDCY        -
   AND          3
   CALL         4
   COMPARE      4
   DISABLE      -
   ENABLE       1
   FETCH        3
   INPUT        2
   JUMP         12
   LOAD         17
   OR           -
   OUTPUT       6
   RETURN       3
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STORE        6
   SUB          -
   SUBCY        -
   TEST         -
   XOR          1
