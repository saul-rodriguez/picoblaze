Open PicoBlaze Assembler log for program "test.psm"
Generated by opbasm v1.3.9
  Assembled on 2019-09-28T22:15:34
  Target architecture: PicoBlaze-3

  Last occupied address: 023 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 36
  Memory locations available: 988
  Scratchpad size: 64


Optimizations
-------------
  Static analysis:
    Dead instructions found: 61
    Analyzed entry points: 0x000, 0x3FF
  Dead code removal: Applied


Assembly listing
----------------
000                                          ;--------------------------------------------------------
000                                          ; File Created by SDCC : free open source ANSI-C Compiler
000                                          ; Version 3.0.1 #6227 (Oct 24 2011) (CYGWIN)
000                                          ; This file was generated Sat Sep 28 22:15:24 2019
000                                          ;--------------------------------------------------------
000                                          ;--------------------------------------------------------
000                                          ; global & static initialisations
000                                          ;--------------------------------------------------------
000                                          constant _buf_3, 00
000                                          constant _buf_2, 01
000                                          constant _buf_1, 02
000                                          constant _buf_0, 03

000  00F3F                                   load sf, 3f
001  34002            ╭⤙                     jump __sdcc_program_startup
002                   │                      ;--------------------------------------------------------
002                   │                      ; Home
002                   │                      ;--------------------------------------------------------
002                   │ __sdcc_program_startup:
002  30004           ╭┴⤙                     call _main
003                  │                       ;	return from main will lock up
003                  │          __sdcc_loop:
003  34003           │╰▶                     jump __sdcc_loop
004                  │                       ;--------------------------------------------------------
004                  │                       ; code
004                  │                       ;--------------------------------------------------------
004                  │                       ;	test.c:13: void main()
004                  │                _main:
004                  │                       ;	test.c:18: test = 0xff;
004  000FF           ╰─▶                     load s0, ff
005                                          ;	test.c:19: num = 5;
005  00105                                   load s1, 05
006                                          ;	test.c:20: while(1) {
006                                 _L00102:
006                                          ;	test.c:21: res = test*num;
006  01210            ╭▶                     load s2, s1
007  01300            │                      load s3, s0
008  01B30            │                      load sb, s3
009  01C20            │                      load sc, s2
00A  30019           ╭─⤙                     call __muluchar
00B  012B0           ││                      load s2, sb
00C  013C0           ││                      load s3, sc
00D  01420           ││                      load s4, s2
00E  01530           ││                      load s5, s3
00F                  ││                      ;	test.c:23: PBLAZEPORT[0] = (unsigned char)res;
00F  01240           ││                      load s2, s4
010  01350           ││                      load s3, s5
011  2C200           ││                      output s2, 00
012                  ││                      ;	test.c:24: PBLAZEPORT[1] = (unsigned char)(res >> 8);
012  01240           ││                      load s2, s4
013  01350           ││                      load s3, s5
014  01630           ││                      load s6, s3
015  00701           ││                      load s7, 01
016  2C601           ││                      output s6, 01
017                  ││                      ;	test.c:25: test++;
017  18001           ││                      add s0, 01
018  34006           │╰⤙                     jump _L00102
019                  │                       ;	test.c:48: void do_math(unsigned char data)
019                  │             _do_math:
019                  │                       ;REMOVED: load s0, sb
019                  │                       ;	test.c:57: d = (unsigned short)a*b;
019                  │                       ;REMOVED: load s1, 00
019                  │                       ;REMOVED: load sb, s0
019                  │                       ;REMOVED: load sc, s1
019                  │                       ;REMOVED: load sd, 05
019                  │                       ;REMOVED: load se, 00
019                  │                       ;REMOVED: call __mulint
019                  │                       ;REMOVED: load s0, sb
019                  │                       ;REMOVED: load s1, sc
019                  │                       ;	test.c:62: buf[0] = (unsigned char) d;
019                  │                       ;REMOVED: load s2, _buf_3
019                  │                       ;REMOVED: load s3, s0
019                  │                       ;REMOVED: store s3, (s2)
019                  │                       ;	test.c:63: buf[1] = (unsigned char) (d >> 8);
019                  │                       ;REMOVED: load s2, _buf_3
019                  │                       ;REMOVED: add s2, 01
019                  │                       ;REMOVED: load s3, s1
019                  │                       ;REMOVED: load s4, 01
019                  │                       ;REMOVED: store s3, (s2)
019                  │                       ;REMOVED: return
019                  │                       ;	test.c:77: unsigned short mult8(unsigned char a, unsigned char b)
019                  │               _mult8:
019                  │                       ;	test.c:111: __endasm;
019                  │                       ;REMOVED: store s2, (sf)
019                  │                       ;REMOVED: sub sf, 01
019                  │                       ;REMOVED: load s0, sb
019                  │                       ;REMOVED: load s1, sc
019                  │                       ;REMOVED: load sc, 00                    ;msb
019                  │                       ;REMOVED: load sb, 00                    ;lsb
019                  │                       ;REMOVED: load s2, 01
019                  │            mul8_loop:
019                  │                       ;REMOVED: test s1, s2
019                  │                       ;REMOVED: jump z, mul8_no_add
019                  │                       ;REMOVED: add sb, s0
019                  │          mul8_no_add:
019                  │                       ;REMOVED: sra sb
019                  │                       ;REMOVED: sra sc
019                  │                       ;REMOVED: sl0 s2
019                  │                       ;REMOVED: jump nz, mul8_loop
019                  │                       ;REMOVED: add sf, 01
019                  │                       ;REMOVED: fetch s2, (sf)
019                  │                       ;REMOVED: return
019                  │                       ;REMOVED: return
019                  │                       ;	test.c:119: unsigned short mult16(unsigned short a, unsigned short b)
019                  │              _mult16:
019                  │                       ;REMOVED: load s0, sb
019                  │                       ;REMOVED: load s1, sc
019                  │                       ;REMOVED: load s2, sd
019                  │                       ;REMOVED: load s3, se
019                  │                       ;	test.c:123: aux = a + b;
019                  │                       ;REMOVED: add s0, s2
019                  │                       ;REMOVED: addcy s1, s3
019                  │                       ;	test.c:125: return aux;
019                  │                       ;REMOVED: load sc, s1
019                  │                       ;REMOVED: load sb, s0
019                  │                       ;REMOVED: return
                     │
019                  │           __muluchar:
019  00E08           ╰─▶                     load se, 08
01A  01DC0                                   load sd, sc
01B  00C00                                   load sc, 00
01C                                 _LM0024:
01C  12B01           ╭─▶                     test sb, 01
01D  3501F           │╭⤙                     jump Z, _LM0023
01E  19CD0           ││                      add sc, sd
01F                  ││             _LM0023:
01F  20C0E           │╰▶                     sr0 sc
020  20B08           │                       sra sb
021  1CE01           │                       sub se, 01
022  3541C           ╰─⤙                     jump NZ, _LM0024
023  2A000                                   return

024                                __mulint:
024                                          ;REMOVED: load s7, 10
024                                          ;REMOVED: load s8, sd
024                                          ;REMOVED: load s9, se
024                                          ;REMOVED: load sd, 00
024                                          ;REMOVED: load se, 00
024                                 _LM0026:
024                                          ;REMOVED: test sb, 01
024                                          ;REMOVED: jump Z, _LM0025
024                                          ;REMOVED: add sd, s8
024                                          ;REMOVED: addcy se, s9
024                                 _LM0025:
024                                          ;REMOVED: sr0 se
024                                          ;REMOVED: sra sd
024                                          ;REMOVED: sra sc
024                                          ;REMOVED: sra sb
024                                          ;REMOVED: sub s7, 01
024                                          ;REMOVED: jump NZ, _LM0026
024                                          ;REMOVED: return
024                                          ;--------------------------------------------------------
024                                          ; interrupt vector
024                                          ;--------------------------------------------------------

All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/saul/projects/picoblaze/pbcc/test1/test.psm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file
 ----------------      -----  ---------------
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
 *  _buf_0             03     test.psm
 *  _buf_1             02     test.psm
 *  _buf_2             01     test.psm
    _buf_3             00     test.psm
    datestamp_day      1C
    datestamp_month    09
    datestamp_year     13
    timestamp_hours    16
    timestamp_minutes  0F
    timestamp_seconds  22

       * Unreferenced constant(s)


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.9"
    datestamp$       "28 Sep 2019"
    timestamp$       "22:15:34"


List of line labels
-------------------
    Label                   Addr  Source PSM file
 --------                   ----  ---------------
    _L00102                 006   test.psm
    _LM0023                 01F   test.psm
    _LM0024                 01C   test.psm
    _LM0025                 024   test.psm
    _LM0026                 024   test.psm
    __mulint                024   test.psm
    __muluchar              019   test.psm
    __sdcc_loop             003   test.psm
    __sdcc_program_startup  002   test.psm
 *  _do_math                019   test.psm
    _main                   004   test.psm
 *  _mult16                 019   test.psm
 *  _mult8                  019   test.psm
    mul8_loop               019   test.psm
    mul8_no_add             019   test.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          2
   ADDCY        -
   AND          -
   CALL         2
   COMPARE      -
   DISABLE      -
   ENABLE       -
   FETCH        -
   INPUT        -
   JUMP         5
   LOAD         20
   OR           -
   OUTPUT       2
   RETURN       1
   RETURNI      -
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          1
   SR1          -
   SRA          1
   SRX          -
   STORE        -
   SUB          1
   SUBCY        -
   TEST         1
   XOR          -
